import openai
from flask import Flask, render_template, request, jsonify, session
from dotenv import load_dotenv
import os
import random
import re

load_dotenv()

app = Flask(__name__)
app.secret_key = os.getenv("FLASK_SECRET_KEY", os.urandom(24))

openai.api_key = os.getenv("OPENAI_API_KEY")
MODEL_ENGINE = "gpt-3.5-turbo"

SITUATIONS = [
    {
        "id": 1,
        "description": "Збірка меблів на об’єкті",
        "requirements": "легкий, зручний шуруповерт з хорошою ергономікою для тривалої роботи",
        "correct_models": ["CD-12QX", "CD-12CX", "CD-12BC"],
        "wrong_models": ["CD-200BCULTRA", "CD-201HBC", "CD-218Q", "CD-200BCCOMPACT"],
        "hints": [
        "Мені потрібен саме 12V шуруповерт",
        "Збираю шафи й кухні, часто прямо у клієнта",
        "Тримаю інструмент у руках по кілька годин",
        "Важливо, щоб рука не втомлювалася",
        "Комфорт важливіший за потужність"
        ]
    },
    {
        "id": 2,
        "description": "Домашній ремонт",
        "requirements": "недорогий та компактний шуруповерт для побутових задач",
        "correct_models": ["CD-12QX", "CD-12CX", "CD-12BC"],
        "wrong_models": ["CD-200BCULTRA", "CD-201HBC", "CD-218Q", "CD-200BCCOMPACT"],
        "hints": [
        "Шукаю 12V шуруповерт для дому",
        "Іноді треба повісити полицю або зібрати комод",
        "Не хочу переплачувати за потужність",
        "Ціную компактність і зручність",
        "Бюджет до 2000 грн"
        ]
    },
    {
        "id": 3,
        "description": "Подарунок татові",
        "requirements": "компактний, простий у використанні шуруповерт для базових робіт",
        "correct_models": ["CD-12QX", "CD-12CX", "CD-12BC"],
        "wrong_models": ["CD-200BCULTRA", "CD-201HBC", "CD-218Q", "CD-200BCCOMPACT"],
        "hints": [
        "Шукаю 12V шуруповерт як подарунок",
        "Батько іноді щось підкручує вдома або в гаражі",
        "Йому потрібен простий та надійний інструмент",
        "Без складних налаштувань",
        "Головне — щоб був легкий і зрозумілий"
        ]
    },
    {
        "id": 4,
        "description": "Ремонт електроніки, робота з дрібними кріпленнями",
        "requirements": "максимальний контроль обертів і точність",
        "correct_models": ["CD-12QX", "CD-12CX", "CD-12BC"],
        "wrong_models": ["CD-200BCULTRA", "CD-201HBC", "CD-218Q", "CD-200BCCOMPACT"],
        "hints": [
        "Мені точно потрібен 12V шуруповерт",
        "Працюю з дрібними гвинтами й електронікою",
        "Важлива точність і контроль, щоб нічого не зіпсувати",
        "Сильною потужністю можна нашкодити",
        "Працюю у вузьких місцях"
        ]
    },
    {
        "id": 5,
        "description": "Шуруповерт для дружини",
        "requirements": "максимально легкий, зручний, із простим управлінням",
        "correct_models": ["CD-12QX", "CD-12CX"],
        "wrong_models": ["CD-200BCULTRA", "CD-201HBC", "CD-218Q", "CD-200BCCOMPACT", "CD-12BC"],
        "hints": [
        "Потрібен 12V шуруповерт, щоб дружина могла сама збирати меблі",
        "Важливо, щоб був легкий і не лякав шумом",
        "Без складних функцій і налаштувань",
        "Перевага — компактний корпус",
        "Використання 1-2 рази на місяць"
        ]
    },
    {
        "id": 6,
        "description": "Є 12V акумулятор 2Ah — шукаю безщітковий шуруповерт під нього",
        "requirements": "корпус без акумулятора, сумісність із наявним АКБ",
        "correct_models": ["CD-12BC"],
        "wrong_models": ["CD-200BCULTRA", "CD-201HBC", "CD-218Q", "CD-200BCCOMPACT", "CD-12QX", "CD-12CX"],
        "hints": [
        "У мене вже є 12V акумулятор Dnipro-M на 4Ah",
        "Шукаю лише тушку без АКБ",
        "Хочу зекономити, використовуючи вже наявний акумулятор",
        "Бажано щось компактне",
        "Не хочу брати потужнішу серію"
        ]
    },
    {
        "id": 7,
        "description": "Є 12V акумулятор 4Ah — потрібна сумісна тушка",
        "requirements": "сумісність із акумулятором і збалансована вага",
        "correct_models": ["CD-12BC"],
        "wrong_models": ["CD-200BCULTRA", "CD-201HBC", "CD-218Q", "CD-200BCCOMPACT", "CD-12QX", "CD-12CX"],
        "hints": [
        "Маю 12V акумулятор Dnipro-M на 4Ah",
        "Не хочу купувати комплект ще раз",
        "Цікавить лише компактна модель",
        "Бажано, щоб не був дуже важкий у руці",
        "Шуруповерт — для професійних завдань"
        ]
    },
    {
        "id": 8,
        "description": "Клієнт вже має зарядку і 12V акумулятор",
        "requirements": "лише тушка, бо все інше вже є",
        "correct_models": ["CD-12QX", "CD-12CX", "CD-12BC"],
        "wrong_models": ["CD-200BCULTRA", "CD-201HBC", "CD-218Q", "CD-200BCCOMPACT"],
        "hints": [
        "У мене вже є зарядка і 12V акумулятор від Dnipro-M",
        "Хочу купити тільки інструмент",
        "Шуруповерт має бути сумісний із моїм акумулятором",
        "Розглядаю безщітковий варіант",
        "Використовуватиму часто, займаюсь різним ремонтом"
        ]
    },
    {
        "id": 9,
        "description": "Шуруповерт для дачі",
        "requirements": "компактний, легкий, автономний",
        "correct_models": ["CD-12QX", "CD-12CX"],
        "wrong_models": ["CD-200BCULTRA", "CD-201HBC", "CD-218Q", "CD-200BCCOMPACT", "CD-12BC"],
        "hints": [
        "Шукаю 12V шуруповерт, щоб залишити на дачі",
        "Користуюсь нечасто, але має бути надійний",
        "Хочу недорогий варіант",
        "Має бути простим в експлуатації",
        "Не потрібно щось надпотужне"
        ]
    },
    {
        "id": 101,
        "description": "Монтаж гіпсокартонних конструкцій у великому обсязі",
        "requirements": "потужний шуруповерт, здатний працювати по металу, з довгими саморізами",
        "correct_models": ["CD-200BCULTRA", "CD-201HBC", "CD-200BCCOMPACT"],
        "wrong_models": ["CD-12QX", "CD-12CX", "CD-12BC", "CD-218Q"],
        "hints": [
        "Шуруповерт потрібен для встановлення гіпсокартону на металеві профілі",
        "Працюю великими об'ємами, інструмент часто в руках",
        "Саморізи по металу — 3.5×35 мм і більше",
        "Потрібна потужність і надійність",
        "12V — слабенькі, пробував — не тягнуть"
        ]
    },
    {
        "id": 102,
        "description": "Свердління металу товщиною до 5 мм",
        "requirements": "шуруповерт із високим крутним моментом і хорошою продуктивністю",
        "correct_models": ["CD-200BCULTRA", "CD-201HBC", "CD-200BCCOMPACT"],
        "wrong_models": ["CD-12QX", "CD-12CX", "CD-12BC", "CD-218Q"],
        "hints": [
        "Часто свердлю отвори в металі 3–5 мм",
        "Звичайні шуруповерти перегріваються або не справляються",
        "Потрібен серйозний інструмент",
        "12V — не підходить, пробував",
        "Головне — тяга і витривалість"
        ]
    },
    {
        "id": 103,
        "description": "Будівництво каркасного будинку",
        "requirements": "максимальна потужність, автономність, робота з довгими кріпленнями",
        "correct_models": ["CD-200BCULTRA", "CD-201HBC", "CD-200BCCOMPACT"],
        "wrong_models": ["CD-12QX", "CD-12CX", "CD-12BC", "CD-218Q"],
        "hints": [
        "Робимо каркас — дерев'яні балки, саморізи 100–120 мм",
        "Потрібен дуже сильний шуруповерт, бажано з металевим редуктором",
        "12V — взагалі не варіант",
        "Хочу працювати без мережі, тільки акумулятор",
        "Ціную зносостійкість"
        ]
    },
    {
        "id": 104,
        "description": "Установка покрівлі з металопрофілю",
        "requirements": "швидка та ефективна робота з покрівельними саморізами, особливо з шайбами",
        "correct_models": ["CD-200BCULTRA", "CD-201HBC", "CD-200BCCOMPACT"],
        "wrong_models": ["CD-12QX", "CD-12CX", "CD-12BC", "CD-218Q"],
        "hints": [
        "Працюю на даху — монтуємо металопрофіль",
        "Шуруповерт має крутити саморізи з шайбою в метал",
        "Потрібен потужний і витривалий",
        "Бажано 2 передачі",
        "12V — не справляється, немає тяги"
        ]
    },
    {
        "id": 105,
        "description": "Робота з великими меблями із масиву дерева",
        "requirements": "високий крутний момент і стабільна робота в твердому матеріалі",
        "correct_models": ["CD-200BCULTRA", "CD-201HBC", "CD-200BCCOMPACT"],
        "wrong_models": ["CD-12QX", "CD-12CX", "CD-12BC", "CD-218Q"],
        "hints": [
        "Збираю меблі з масиву — тверда деревина",
        "Саморізи великого діаметру, часто треба досверлювати",
        "Потрібен сильний шуруповерт",
        "Звичайні моделі або буксують, або гріються",
        "Бажано — потужна модель із металевим редуктором"
        ]
    },
    {
        "id": 201,
        "description": "Монтаж кухонних шаф на цегляну стіну",
        "requirements": "потрібен шуруповерт із ударом, здатний свердлити цеглу під дюбелі",
        "correct_models": ["CD-201HBC"],
        "wrong_models": ["CD-12QX", "CD-12CX", "CD-12BC", "CD-218Q", "CD-200BCULTRA", "CD-200BCCOMPACT"],
        "hints": [
        "Потрібно повісити кухонні шафи на цегляну стіну",
        "Свердлю отвори під дюбелі Ø6–8 мм",
        "Бажано, щоб був ударний режим",
        "12V або моделі без удару — не підходять",
        "CD-201HBC мені радили як оптимальний варіант"
        ]
    },
    {
        "id": 202,
        "description": "Установка кронштейнів телевізора у квартирі з цегляними стінами",
        "requirements": "ударний шуруповерт для точного свердління в цеглі",
        "correct_models": ["CD-201HBC"],
        "wrong_models": ["CD-12QX", "CD-12CX", "CD-12BC", "CD-218Q", "CD-200BCULTRA", "CD-200BCCOMPACT"],
        "hints": [
        "Стіни — стара червона цегла",
        "Треба просвердлити отвори під анкерні болти",
        "Мій попередній шуруповерт не справлявся",
        "Потрібен саме 20V з ударом",
        "Шуруповерт має бути витривалим, бо працюю по 5–6 отворів за раз"
        ]
    },
    {
        "id": 203,
        "description": "Монтаж перил і турніків у під'їзді",
        "requirements": "ударний шуруповерт для цегляної кладки, на висоті, в складних умовах",
        "correct_models": ["CD-201HBC"],
        "wrong_models": ["CD-12QX", "CD-12CX", "CD-12BC", "CD-218Q", "CD-200BCULTRA", "CD-200BCCOMPACT"],
        "hints": [
        "Встановлюю металеві конструкції у під'їзді — кріплення до цегли",
        "Часто працюю на драбині — важливо, щоб інструмент був збалансований",
        "Потрібен удар і точність, бо свердлю в швах і в самій цеглі",
        "CD-201HBC має оптимальне співвідношення ваги і сили",
        "Інші моделі або слабкі, або без удару"
        ]
    }
]

TOOL_MODELS = [
    "CD-12QX",
    "CD-200BCULTRA",
    "CD-201HBC",
    "CD-218Q",
    "CD-200BCCOMPACT",
    "CD-12CX",
    "CD-12BC"
]

UNACCEPTABLE_BEHAVIOR_PROMPT = """
Якщо користувач пише матюки та слова, які є недопустими при спілкуванні з клієнтами, 
ти маєш право завершити діалог. Приклад відповіді:
"я вас не зрозумів"
Після цього заверши діалог.
"""
RELEVANT_KEYWORDS = [
    "роб", "завдан", "акумулятор", "діамет", "метал", "задач", "мережев", "прац", "як", "чому", "чи", "який", "яка", "яке",
    "дерево", "бетон", "насадки", "режим", "крутний", "момент", "потужн", "прац", "компак", "свер", "кейс", "постійн", "оберт"
]

def is_relevant_question(text):
    return any(keyword in text for keyword in RELEVANT_KEYWORDS)

def is_question(message):
    return "?" in message or message.strip().lower().startswith((
        "прац", "як", "чому", "чи", "який", "яка", "яке", "роб",
        "завдан", "акумулятор", "діамет", "метал", "задач", "мережев",
        "дерево", "матер", "насадки", "режим", "крутний", "момент",
        "потужн", "буд", "свер"
    ))

def init_conversation():
    selected_situation = random.choice(SITUATIONS)
    session['situation'] = selected_situation
    session['current_situation_id'] = selected_situation["id"]
    session['available_models'] = TOOL_MODELS  # Показуємо всі моделі
    session['stage'] = 1
    session['chat_active'] = True
    session['message_count'] = 0
    session['wrong_model_attempts'] = 0
    session['question_count'] = 0
    session['unique_questions'] = []
    session['off_topic_count'] = 0
    session['misunderstood_count'] = 0
    session['objection_round'] = 1
    session['warning_count'] = 0

    system_prompt = f"""
    Ти — віртуальний **клієнт магазину**, який **прийшов купити шуруповерт**.  
    Твоя **єдина мета** — **отримати потрібну інформацію для покупки** згідно твоєї ситуації.
    Не висвітлюй ситуацію повністю. Користувач ставить питання – ти **відповідаєш по одному реченню**. 
    Ти **не є консультантом**, **не допомагаєш** користувачу, **не пропонуєш моделі**, **не ставиш зустрічних запитань**.
    Ти не є консультантом. Ти клієнт, який хоче дізнатися все необхідне про інструмент, щоби прийняти рішення про покупку.  
    Ти уточнюєш деталі, висловлюєш свої вимоги. 

    Твоя ситуація: {selected_situation['description']}
    Твої потреби: {selected_situation['requirements']}

    {UNACCEPTABLE_BEHAVIOR_PROMPT}

    Поведінка:
    - Якщо користувач грубий або використовує лайливу лексику — завершуй діалог фразою "Я Вас не зрозумів"
    - В іншому випадку — задавай додаткові запитання або висловлюй свою думку.

    Починай розмову нейтрально:  
    "Добрий день, мені потрібен шуруповерт."
    """

    return [
        {"role": "system", "content": system_prompt},
        {"role": "assistant", "content": "Добрий день, мені потрібен шуруповерт."}
    ]

def is_relevant_question_gpt(question, situation_description):
    prompt = f"""
    Чи є це питання релевантним для вибору шуруповерта в контексті цієї ситуації?
    Ситуація: {situation_description}
    
    Враховуй такі критерії:
    - Питань про технічні характеристики (потужність, акумулятор, крутний момент)
    - Питань про сферу застосування (дерево, метал, бетон)
    - Питань про функціональність (режими роботи, насадки)
    - Питань про сумісність або особливості використання

    Відповідай лише 'так' або 'ні'. Питання: "{question}"
    """
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            temperature=0,
            max_tokens=10
        )
        answer = response.choices[0].message["content"].lower()
        print(f"[DEBUG] Відповідь GPT на релевантність питання: {answer}")
        return "так" in answer
    except Exception as e:
        print(f"Помилка при перевірці релевантності: {str(e)}")
        return False

def match_model(user_input, available_models):
    user_model = re.sub(r'[^A-Z0-9-]', '', user_input.upper())
    # Точне співпадіння, а не пошук підрядка:
    for model in available_models:
        clean_model = re.sub(r'[^A-Z0-9-]', '', model.upper())
        if user_model == clean_model:
            return model
    return None

@app.route('/')
def home():
    if "unique_questions" not in session:
        session["unique_questions"] = []
    return render_template('index.html')

@app.route('/start_chat')
def start_chat():
    session['history'] = init_conversation()
    # Якщо треба, скинь інші параметри
    session["stage"] = 1
    session["question_count"] = 0
    session["model"] = None
    session["chat_active"] = True
    session["unique_questions"] = []
    return jsonify({"reply": session['history'][1]['content']})

@app.route("/restart-chat", methods=["POST"])
def restart_chat():
    keys_to_clear = [
        "history", "stage", "question_count", "model", "chat_active",
        "unique_questions", "misunderstood_count", "available_models",
        "wrong_model_attempts", "user_answers", "off_topic_count",
        "objection_round", "generated_questions", "current_question_index",
        "current_situation_id", "situation", "last_seller_reply",
        "current_objection"
    ]
    for key in keys_to_clear:
        session.pop(key, None)
    return jsonify({"message": "Сесію скинуто."})

def match_model(user_input, available_models):
    return user_input.strip().upper() in [m.strip().upper() for m in available_models]

@app.route("/show_models", methods=["POST"])
def show_models():
    session["stage"] = 2
    return jsonify({
        "models": session.get("available_models", []),
        "stage": 2
    })

@app.route("/chat", methods=["POST"])
def chat():
    print("Доступні моделі для вибору:", session.get("available_models"))
    user_input = request.json.get("message", "").strip()

    print(f"[DEBUG] Користувач написав: {user_input}")
    print(f"[DEBUG] Поточна стадія: {session.get('stage')}")

    session.setdefault("misunderstood_count", 0)
    session.setdefault("objection_round", 1)

    if "history" not in session or not session["history"]:
            session["history"] = init_conversation()
            session["stage"] = 1
            session["question_count"] = 0
            session["model"] = None
            session["chat_active"] = True
            session["unique_questions"] = []
            session["misunderstood_count"] = 0
            session["wrong_model_attempts"] = 0
            session["user_answers"] = {}

        # --- Обробка етапу вибору моделі ---
        # --- Обробка етапу вибору моделі ---
    if session["stage"] == 2:
        print(f"[DEBUG] Входимо в stage 2 — обробка вибору моделі: {user_input}")
            
        user_model = re.sub(r'[^A-Z0-9-]', '', user_input.upper())
        matched_models = [m for m in session["available_models"] if user_model in m.upper()]
        index = session.get('current_question_index', 0)

        if not matched_models:
            session["chat_active"] = False
            return jsonify({
                "reply": f"Ви обрали «{user_input}», але такої моделі немає в списку. Завершую діалог.",
                "chat_ended": True,
                "show_restart_button": True
            })

        user_model = matched_models[0].upper()
        current_situation = next((s for s in SITUATIONS if s["id"] == session.get("current_situation_id")), None)
        if not current_situation:
            return jsonify({
                "reply": "Помилка: ситуація не знайдена.",
                "chat_ended": True,
                "show_restart_button": True
            })

        correct_models = [model.upper() for model in current_situation["correct_models"]]

        if user_model.upper() in correct_models:
            session["model"] = user_model
            session["stage"] = 3
            session["current_question_index"] = 0
            session["user_answers"] = {}

            prompt = f"""Ти клієнт, який обрав шуруповерт {user_model} для {session['situation']['description']}.
    Згенеруй 3 питання про **крутний момент**, **зовнішню будову** та функції цього шуруповерта."""

            try:
                response = openai.ChatCompletion.create(
                    model="gpt-3.5-turbo",
                    messages=[
                        {"role": "system", "content": "Ти — клієнт, який має задати уточнюючі запитання про модель інструмента."},
                        {"role": "user", "content": prompt}
                    ],
                    temperature=0.6,
                    max_tokens=200
                )
                content = response.choices[0].message.get("content", "")
                questions = [line.strip(" 1234567890.-") for line in content.split('\n') if line.strip()]
                session["generated_questions"] = questions
                session.modified = True

                first_question = questions[0] if questions else "Яке перше ваше питання про цю модель?"

                return jsonify({
                    "reply": f"Добре, модель {user_model} мені підходить. Зараз задам кілька уточнюючих питань по черзі.\n\n{first_question}",
                    "chat_ended": False,
                    "stage": 3
                })

            except Exception as e:
                return jsonify({
                    "reply": "Вибачте, сталася помилка при генерації питань. Спробуйте ще раз.",
                    "chat_ended": False
                })

        else:
            # ❗️Ключова частина: відразу завершуємо при неправильній моделі
            session["chat_active"] = False
            return jsonify({
                "reply": f"Модель «{user_model}» не підходить до вашої задачі. Завершую діалог.",
                "chat_ended": True,
                "show_restart_button": True,
                "hide_choose_model_btn": True
            })

    elif session["stage"] == 3:
        if 'generated_questions' not in session or not session['generated_questions']:
            return jsonify({
                "reply": "Питання не знайдені. Давайте почнемо спочатку.",
                "chat_ended": True,
                "show_restart_button": True
            })

        index = session.get('current_question_index', 0)
        current_question = session['generated_questions'][index]

        # GPT-перевірка: чи по темі відповідь
        gpt_prompt = f"Питання: '{current_question}'\nВідповідь: '{user_input}'\n\nЧи стосується ця відповідь суті питання? Відповідай тільки 'так' або 'ні'."

        try:
            validation = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "Ти перевіряєш відповідність відповіді суті питання. Відповідай лише 'так' або 'ні'."},
                    {"role": "user", "content": gpt_prompt}
                ],
                temperature=0,
                max_tokens=100
            )
            is_relevant = validation.choices[0].message["content"].strip().lower()

            if is_relevant != "так":
                session["off_topic_count"] = session.get("off_topic_count", 0) + 1
                if session["off_topic_count"] >= 2:
                    session["chat_active"] = False
                    return jsonify({
                        "reply": "Ви двічі надали відповідь не по темі. Діалог завершено.",
                        "chat_ended": True,
                        "show_restart_button": True
                    })
                else:
                    return jsonify({
                        "reply": f"Здається, ця відповідь не зовсім по темі. {current_question}",
                        "chat_ended": False
                    })

            # Якщо відповідь по темі — скидаємо лічильник
            session["off_topic_count"] = 0
            session.setdefault('user_answers', {})[current_question] = user_input
            session['current_question_index'] += 1

            if session['current_question_index'] < len(session['generated_questions']):
                next_question = session['generated_questions'][session['current_question_index']]
                return jsonify({
                    "reply": next_question,
                    "chat_ended": False
                })
            else:
                session["stage"] = 4
                session["chat_active"] = True
                objections = [
                    "Мені здається, це трохи дорогувато.",
                    "А це точно не якась китайська модель?",
                    "Ваша гарантія точно працює?",
                    "Я бачив в інтернеті дешевше."
                ]
                chosen_objection = random.choice(objections)
                session["current_objection"] = chosen_objection
                return jsonify({
                    "reply": f"Хм... {chosen_objection}",
                    "chat_ended": False,
                    "stage": 4
                })

        except Exception as e:
            return jsonify({
                "reply": "Виникла помилка при перевірці відповіді. Спробуйте ще раз.",
                "chat_ended": False
            })

    # --- Обробка заперечення (stage 4) ---
    elif session["stage"] == 4:
        objection = session.get("current_objection", "Заперечення")
        seller_reply = user_input

    # --- Перший раунд: GPT генерує уточнення або сумнів ---
        if session["objection_round"] == 1:
            gpt_prompt = f"Клієнт сказав: '{objection}'. Продавець відповів: '{seller_reply}'. Напиши коротку відповідь клієнта, яка містить сумнів або уточнення, без остаточного рішення."

            try:
                response = openai.ChatCompletion.create(
                    model="gpt-3.5-turbo",
                    messages=[
                        {"role": "system", "content": "Ти — клієнт магазину інструментів. Твоя мета — сформулювати ввічливий сумнів або уточнення після відповіді продавця на заперечення."},
                        {"role": "user", "content": gpt_prompt}
                    ],
                    temperature=0.5,
                    max_tokens=200
                )

                reply = response.choices[0].message["content"].strip()
                session["objection_round"] = 2
                session["last_seller_reply"] = seller_reply

                return jsonify({
                    "reply": reply,
                    "chat_ended": False
                })
            except Exception as e:
                return jsonify({
                    "reply": "Помилка при формуванні уточнення. Спробуйте ще раз.",
                    "chat_ended": False
                })

    # --- Другий раунд: GPT оцінює остаточно ---
        elif session["objection_round"] == 2:
            seller_reply_full = session["last_seller_reply"] + " " + seller_reply
            gpt_prompt = (
                f"Клієнт сказав: '{objection}'. Продавець відповів: '{seller_reply_full}'. "
                "Ти — клієнт, який висловив заперечення. Якщо продавець відповів логічно, аргументовано і хоча б частково розвіяв сумнів — "
                "напиши лише слово «переконливо». Якщо відповідь нечітка або не містить нічого корисного — напиши «непереконливо». "
            )

            try:
                result = openai.ChatCompletion.create(
                    model="gpt-3.5-turbo",
                    messages=[
                        {"role": "system", "content": (
                            "Ти — клієнт, який висловив заперечення. Якщо продавець відповів логічно, аргументовано "
                            "Якщо відповідь містить хоч один вагомий аргумент — вважай її переконливою. Навіть якщо аргумент простий, але логічний, напиши «переконливо»."
                            "Якщо відповідь зовсім не відповідає на заперечення, напиши «непереконливо»."
                        )},
                        {"role": "user", "content": gpt_prompt}
                    ],
                    temperature=0.6,
                    max_tokens=100
                )

                rating = result.choices[0].message["content"].strip().lower()
                print(f"Оцінка GPT: '{rating}'")  # Для дебагу

                session["chat_active"] = False
                session["objection_round"] = 1  # обнуляємо для наступного запуску

                if "переконливо" in rating:
                    reply = "Дякую, ви мене переконали! Я готовий зробити покупку."
                else:
                    reply = "На жаль, ви мене не переконали. Завершую діалог."

                return jsonify({
                    "reply": reply,
                    "chat_ended": True,
                    "show_restart_button": True
                })

            except Exception as e:
                return jsonify({
                    "reply": "Сталася помилка при оцінці відповіді. Спробуйте ще раз.",
                    "chat_ended": False
                })


    # --- Стандартна логіка для stage 1 ---
    elif session["stage"] == 1:
        # Перевірка, чи питання релевантне
        if is_relevant_question_gpt(user_input, session["situation"]["description"]):
            # Перевіряємо, чи питання нове
            if user_input.lower() not in [q.lower() for q in session["unique_questions"]]:
                session["unique_questions"].append(user_input)
                session["question_count"] += 1

            # Додаємо до історії
            session["history"].append({"role": "user", "content": user_input})

            # Генеруємо відповідь GPT
            try:
                messages = session["history"][-10:]  # Беремо останні 10 повідомлень для контексту
                response = openai.ChatCompletion.create(
                    model="gpt-3.5-turbo",
                    messages=messages,
                    temperature=0.5,
                    max_tokens=150
                )
                answer = response.choices[0].message["content"].strip()
                session["history"].append({"role": "assistant", "content": answer})

                # Обробка для 8+ запитань (попередження)
                if session["question_count"] >= 8:
                    if session.get("warning_count", 0) < 2:
                        session["warning_count"] = session.get("warning_count", 0) + 1
                        warning_text = [
                            "Я вже відповів на багато питань. Можливо, ви вже можете запропонувати мені модель?",
                            "Мені вже набридло відповідати на стільки питань. Давайте вже до справи!"
                        ][session["warning_count"] - 1]
                        
                        return jsonify({
                            "reply": warning_text,
                            "chat_ended": False,
                            "stage": 1,
                            "question_progress": session["question_count"],
                            "show_model_button": True
                        })
                    else:
                        session["chat_active"] = False
                        return jsonify({
                            "reply": "На цьому я завершую діалог. До побачення!",
                            "chat_ended": True,
                            "show_restart_button": True
                        })
                
                answer = response.choices[0].message["content"].strip()
                session["history"].append({"role": "assistant", "content": answer})
                    
                if session["question_count"] >= 3 and not session.get("hint_shown", False):
                    session["hint_shown"] = True
                    session.modified = True

                # Стандартна відповідь (з показом кнопки після 3 запитань)
                return jsonify({
                    "reply": answer,
                    "chat_ended": False,
                    "stage": 1,
                    "question_progress": session["question_count"],
                    "show_model_button": session["question_count"] >= 3,  # Показуємо кнопку після 3 запитань
                    "show_hint": session["question_count"] >= 3 and not session.get("hint_shown", False),
                })

            except Exception as e:
                print(f"[ERROR] Помилка генерації відповіді: {e}")
                return jsonify({
                    "reply": "Вибачте, сталася помилка при відповіді. Спробуйте ще раз.",
                    "chat_ended": False
                })
        else:
            # Питання не релевантне
            session["misunderstood_count"] = session.get("misunderstood_count", 0) + 1
            if session["misunderstood_count"] >= 3:
                session["chat_active"] = False
                return jsonify({
                    "reply": "Ви поставили декілька нерелевантних питань. Діалог завершено.",
                    "chat_ended": True,
                    "show_restart_button": True
                })
            else:
                return jsonify({
                    "reply": "Ваше питання не зовсім стосується вибору шуруповерта. Спробуйте сформулювати інше.",
                    "chat_ended": False
                })
    
if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)