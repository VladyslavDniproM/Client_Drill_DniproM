import openai
from flask import Flask, render_template, request, jsonify, session
from dotenv import load_dotenv
from datetime import datetime
import os
import random
import re
import smtplib
from email.mime.text import MIMEText

load_dotenv()

app = Flask(__name__)
app.secret_key = os.getenv("FLASK_SECRET_KEY", os.urandom(24))

openai.api_key = os.getenv("OPENAI_API_KEY")
MODEL_ENGINE = "gpt-3.5-turbo"

SITUATIONS = [
    {
        "id": 1,
        "description": "Збірка меблів на об’єкті",
        "requirements": "легкий, зручний шуруповерт з хорошою ергономікою для тривалої роботи",
        "correct_models": ["CD-12QX", "CD-12CX", "CD-12BC"],
        "wrong_models": ["CD-200BCULTRA", "CD-201HBC", "CD-218Q", "CD-200BCCOMPACT"],
        "hints": [
        "Мені потрібен саме 12V шуруповерт",
        "Збираю шафи й кухні, часто прямо у клієнта",
        "Тримаю інструмент у руках по кілька годин",
        "Важливо, щоб рука не втомлювалася",
        "Комфорт важливіший за потужність"
        ]
    },
    {
        "id": 2,
        "description": "Домашній ремонт",
        "requirements": "недорогий та компактний шуруповерт для побутових задач",
        "correct_models": ["CD-12QX", "CD-12CX", "CD-12BC"],
        "wrong_models": ["CD-200BCULTRA", "CD-201HBC", "CD-218Q", "CD-200BCCOMPACT"],
        "hints": [
        "Шукаю 12V шуруповерт для дому",
        "Іноді треба повісити полицю або зібрати комод",
        "Не хочу переплачувати за потужність",
        "Ціную компактність і зручність",
        "Бюджет до 2000 грн"
        ]
    },
    {
        "id": 3,
        "description": "Подарунок татові",
        "requirements": "компактний, простий у використанні шуруповерт для базових робіт",
        "correct_models": ["CD-12QX", "CD-12CX", "CD-12BC"],
        "wrong_models": ["CD-200BCULTRA", "CD-201HBC", "CD-218Q", "CD-200BCCOMPACT"],
        "hints": [
        "Шукаю 12V шуруповерт як подарунок",
        "Батько іноді щось підкручує вдома або в гаражі",
        "Йому потрібен простий та надійний інструмент",
        "Без складних налаштувань",
        "Головне — щоб був легкий і зрозумілий"
        ]
    },
    {
        "id": 4,
        "description": "Ремонт електроніки, робота з дрібними кріпленнями",
        "requirements": "максимальний контроль обертів і точність",
        "correct_models": ["CD-12QX", "CD-12CX", "CD-12BC", "CD-218Q"],
        "wrong_models": ["CD-200BCULTRA", "CD-201HBC", "CD-200BCCOMPACT"],
        "hints": [
        "Мені точно потрібен 12V шуруповерт",
        "Працюю з дрібними гвинтами й електронікою",
        "Важлива точність і контроль, щоб нічого не зіпсувати",
        "Сильною потужністю можна нашкодити",
        "Працюю у вузьких місцях"
        ]
    },
    {
        "id": 5,
        "description": "Шуруповерт для дружини",
        "requirements": "максимально легкий, зручний, із простим управлінням",
        "correct_models": ["CD-12QX", "CD-12CX"],
        "wrong_models": ["CD-200BCULTRA", "CD-201HBC", "CD-218Q", "CD-200BCCOMPACT", "CD-12BC"],
        "hints": [
        "Потрібен 12V шуруповерт, щоб дружина могла сама збирати меблі",
        "Важливо, щоб був легкий і не лякав шумом",
        "Без складних функцій і налаштувань",
        "Перевага — компактний корпус",
        "Використання 1-2 рази на місяць"
        ]
    },
    {
        "id": 6,
        "description": "Є 12V акумулятор 2Ah — шукаю безщітковий шуруповерт під нього",
        "requirements": "корпус без акумулятора, сумісність із наявним АКБ",
        "correct_models": ["CD-12BC"],
        "wrong_models": ["CD-200BCULTRA", "CD-201HBC", "CD-218Q", "CD-200BCCOMPACT", "CD-12QX", "CD-12CX"],
        "hints": [
        "У мене вже є 12V акумулятор Dnipro-M на 4Ah",
        "Шукаю лише тушку без АКБ",
        "Хочу зекономити, використовуючи вже наявний акумулятор",
        "Бажано щось компактне",
        "Не хочу брати потужнішу серію"
        ]
    },
    {
        "id": 7,
        "description": "Є 12V акумулятор 4Ah — потрібна сумісна тушка",
        "requirements": "сумісність із акумулятором і збалансована вага",
        "correct_models": ["CD-12BC"],
        "wrong_models": ["CD-200BCULTRA", "CD-201HBC", "CD-218Q", "CD-200BCCOMPACT", "CD-12QX", "CD-12CX"],
        "hints": [
        "Маю 12V акумулятор Dnipro-M на 4Ah",
        "Не хочу купувати комплект ще раз",
        "Цікавить лише компактна модель",
        "Бажано, щоб не був дуже важкий у руці",
        "Шуруповерт — для професійних завдань"
        ]
    },
    {
        "id": 8,
        "description": "Клієнт вже має зарядку і 12V акумулятор",
        "requirements": "лише тушка, бо все інше вже є",
        "correct_models": ["CD-12QX", "CD-12CX", "CD-12BC"],
        "wrong_models": ["CD-200BCULTRA", "CD-201HBC", "CD-218Q", "CD-200BCCOMPACT"],
        "hints": [
        "У мене вже є зарядка і 12V акумулятор від Dnipro-M",
        "Хочу купити тільки інструмент",
        "Шуруповерт має бути сумісний із моїм акумулятором",
        "Розглядаю безщітковий варіант",
        "Використовуватиму часто, займаюсь різним ремонтом"
        ]
    },
    {
        "id": 9,
        "description": "Шуруповерт для дачі",
        "requirements": "компактний, легкий, автономний",
        "correct_models": ["CD-12QX", "CD-12CX"],
        "wrong_models": ["CD-200BCULTRA", "CD-201HBC", "CD-218Q", "CD-200BCCOMPACT", "CD-12BC"],
        "hints": [
        "Шукаю 12V шуруповерт, щоб залишити на дачі",
        "Користуюсь нечасто, але має бути надійний",
        "Хочу недорогий варіант",
        "Має бути простим в експлуатації",
        "Не потрібно щось надпотужне"
        ]
    },
    {
        "id": 101,
        "description": "Монтаж гіпсокартонних конструкцій у великому обсязі",
        "requirements": "потужний шуруповерт, здатний працювати по металу, з довгими саморізами",
        "correct_models": ["CD-200BCULTRA", "CD-201HBC", "CD-200BCCOMPACT"],
        "wrong_models": ["CD-12QX", "CD-12CX", "CD-12BC", "CD-218Q"],
        "hints": [
        "Шуруповерт потрібен для встановлення гіпсокартону на металеві профілі",
        "Працюю великими об'ємами, інструмент часто в руках",
        "Саморізи по металу — 3.5×35 мм і більше",
        "Потрібна потужність і надійність",
        "12V — слабенькі, пробував — не тягнуть"
        ]
    },
    {
        "id": 102,
        "description": "Свердління металу товщиною до 5 мм",
        "requirements": "шуруповерт із високим крутним моментом і хорошою продуктивністю",
        "correct_models": ["CD-200BCULTRA", "CD-201HBC", "CD-200BCCOMPACT"],
        "wrong_models": ["CD-12QX", "CD-12CX", "CD-12BC", "CD-218Q"],
        "hints": [
        "Часто свердлю отвори в металі 3–5 мм",
        "Звичайні шуруповерти перегріваються або не справляються",
        "Потрібен серйозний інструмент",
        "12V — не підходить, пробував",
        "Головне — тяга і витривалість"
        ]
    },
    {
        "id": 103,
        "description": "Будівництво каркасного будинку",
        "requirements": "максимальна потужність, автономність, робота з довгими кріпленнями",
        "correct_models": ["CD-200BCULTRA", "CD-201HBC", "CD-200BCCOMPACT"],
        "wrong_models": ["CD-12QX", "CD-12CX", "CD-12BC", "CD-218Q"],
        "hints": [
        "Робимо каркас — дерев'яні балки, саморізи 100–120 мм",
        "Потрібен дуже сильний шуруповерт, бажано з металевим редуктором",
        "12V — взагалі не варіант",
        "Хочу працювати без мережі, тільки акумулятор",
        "Ціную зносостійкість"
        ]
    },
    {
        "id": 104,
        "description": "Установка покрівлі з металопрофілю",
        "requirements": "швидка та ефективна робота з покрівельними саморізами, особливо з шайбами",
        "correct_models": ["CD-200BCULTRA", "CD-201HBC", "CD-200BCCOMPACT"],
        "wrong_models": ["CD-12QX", "CD-12CX", "CD-12BC", "CD-218Q"],
        "hints": [
        "Працюю на даху — монтуємо металопрофіль",
        "Шуруповерт має крутити саморізи з шайбою в метал",
        "Потрібен потужний і витривалий",
        "Бажано 2 передачі",
        "12V — не справляється, немає тяги"
        ]
    },
    {
        "id": 105,
        "description": "Робота з великими меблями із масиву дерева",
        "requirements": "високий крутний момент і стабільна робота в твердому матеріалі",
        "correct_models": ["CD-200BCULTRA", "CD-201HBC", "CD-200BCCOMPACT"],
        "wrong_models": ["CD-12QX", "CD-12CX", "CD-12BC", "CD-218Q"],
        "hints": [
        "Збираю меблі з масиву — тверда деревина",
        "Саморізи великого діаметру, часто треба досверлювати",
        "Потрібен сильний шуруповерт",
        "Звичайні моделі або буксують, або гріються",
        "Бажано — потужна модель із металевим редуктором"
        ]
    },
    {
        "id": 201,
        "description": "Монтаж кухонних шаф на цегляну стіну",
        "requirements": "потрібен шуруповерт із ударом, здатний свердлити цеглу під дюбелі",
        "correct_models": ["CD-201HBC"],
        "wrong_models": ["CD-12QX", "CD-12CX", "CD-12BC", "CD-218Q", "CD-200BCULTRA", "CD-200BCCOMPACT"],
        "hints": [
        "Потрібно повісити кухонні шафи на цегляну стіну",
        "Свердлю отвори під дюбелі Ø6–8 мм",
        "Бажано, щоб був ударний режим",
        "12V або моделі без удару — не підходять",
        "CD-201HBC мені радили як оптимальний варіант"
        ]
    },
    {
        "id": 202,
        "description": "Установка кронштейнів телевізора у квартирі з цегляними стінами",
        "requirements": "ударний шуруповерт для точного свердління в цеглі",
        "correct_models": ["CD-201HBC"],
        "wrong_models": ["CD-12QX", "CD-12CX", "CD-12BC", "CD-218Q", "CD-200BCULTRA", "CD-200BCCOMPACT"],
        "hints": [
        "Стіни — стара червона цегла",
        "Треба просвердлити отвори під анкерні болти",
        "Мій попередній шуруповерт не справлявся",
        "Потрібен саме 20V з ударом",
        "Шуруповерт має бути витривалим, бо працюю по 5–6 отворів за раз"
        ]
    },
    {
        "id": 203,
        "description": "Монтаж перил і турніків у під'їзді",
        "requirements": "ударний шуруповерт для цегляної кладки, на висоті, в складних умовах",
        "correct_models": ["CD-201HBC"],
        "wrong_models": ["CD-12QX", "CD-12CX", "CD-12BC", "CD-218Q", "CD-200BCULTRA", "CD-200BCCOMPACT"],
        "hints": [
        "Встановлюю металеві конструкції у під'їзді — кріплення до цегли",
        "Часто працюю на драбині — важливо, щоб інструмент був збалансований",
        "Потрібен удар і точність, бо свердлю в швах і в самій цеглі",
        "CD-201HBC має оптимальне співвідношення ваги і сили",
        "Інші моделі або слабкі, або без удару"
        ]
    }
]

TOOL_MODELS = [
    "CD-12QX",
    "CD-200BCULTRA",
    "CD-201HBC",
    "CD-218Q",
    "CD-200BCCOMPACT",
    "CD-12CX",
    "CD-12BC"
]

UNACCEPTABLE_BEHAVIOR_PROMPT = """
Якщо користувач пише матюки та слова, які є недопустими при спілкуванні з клієнтами, 
ти маєш право завершити діалог. Приклад відповіді:
"я вас не зрозумів"
Після цього заверши діалог.
"""
RELEVANT_KEYWORDS = [
    "роб", "завдан", "акумулятор", "діамет", "метал", "задач", "мережев", "прац", "як", "чому", "чи", "який", "яка", "яке",
    "дерево", "бетон", "насадки", "режим", "крутний", "момент", "потужн", "прац", "компак", "свер", "кейс", "постійн", "оберт"
]

def is_relevant_question(text):
    return any(keyword in text for keyword in RELEVANT_KEYWORDS)

def is_question(message):
    return "?" in message or message.strip().lower().startswith((
        "прац", "як", "чому", "чи", "який", "яка", "яке", "роб",
        "завдан", "акумулятор", "діамет", "метал", "задач", "мережев",
        "дерево", "матер", "насадки", "режим", "крутний", "момент",
        "потужн", "буд", "свер"
    ))

def send_email_report(subject, body, to_email):
    msg = MIMEText(body, 'plain', 'utf-8')
    msg['Subject'] = subject
    msg['From'] = os.getenv('EMAIL_ADDRESS')
    msg['To'] = to_email

    try:
        with smtplib.SMTP(os.getenv('EMAIL_HOST'), int(os.getenv('EMAIL_PORT'))) as server:
            server.starttls()
            server.login(os.getenv('EMAIL_ADDRESS'), os.getenv('EMAIL_PASSWORD'))
            server.send_message(msg)
            print("[EMAIL] Звіт успішно відправлено.")
    except Exception as e:
        print(f"[EMAIL ERROR] Не вдалося надіслати лист: {str(e)}")

@app.route('/authenticate', methods=['POST'])
def authenticate():
    seller_name = request.json.get("seller_name", "").strip()
    if not seller_name:
        return jsonify({"error": "Будь ласка, введіть ваше ПІБ"}), 400
    
    session['seller_name'] = seller_name
    session.modified = True
    return jsonify({"success": True, "message": f"Вітаємо, {seller_name}! Тепер ви можете розпочати діалог."})

@app.errorhandler(500)
def internal_error(error):
    if 'seller_name' in session:
        generate_report(session)  # Зберегти звіт навіть при помилці
    return jsonify({"error": "Внутрішня помилка сервера"}), 500

def init_conversation():
    # Очистити всі попередні дані сесії
    session.clear()
    
    selected_situation = random.choice(SITUATIONS)
    session['situation'] = selected_situation
    session['current_situation_id'] = selected_situation["id"]
    session['available_models'] = TOOL_MODELS.copy()  # Використовуємо копію, щоб уникнути модифікації оригіналу
    session['stage'] = 1
    session['chat_active'] = True
    session['message_count'] = 0
    session['wrong_model_attempts'] = 0
    session['question_count'] = 0
    session['unique_questions'] = []
    session['off_topic_count'] = 0
    session['misunderstood_count'] = 0
    session['objection_round'] = 1
    session['warning_count'] = 0
    session['user_answers'] = {}
    session['question_scores'] = []
    session['model_score'] = 0
    session['total_score'] = 0
    session['seller_replies'] = []
    session.modified = True 

    system_prompt = f"""
    Ти — віртуальний **клієнт магазину**, який **прийшов купити шуруповерт**.  
    Твоя **єдина мета** — **отримати потрібну інформацію для покупки** згідно твоєї ситуації.
    Не висвітлюй ситуацію повністю. Користувач ставить питання – ти **відповідаєш по одному реченню**. 
    Ти **не є консультантом**, **не допомагаєш** користувачу, **не пропонуєш моделі**, **не ставиш зустрічних запитань**.
    Ти не є консультантом. Ти клієнт, який хоче дізнатися все необхідне про інструмент, щоби прийняти рішення про покупку.  
    Ти уточнюєш деталі, висловлюєш свої вимоги. 

    Твоя ситуація: {selected_situation['description']}
    Твої потреби: {selected_situation['requirements']}

    {UNACCEPTABLE_BEHAVIOR_PROMPT}

    Поведінка:
    - Якщо користувач грубий або використовує лайливу лексику — завершуй діалог фразою "Я Вас не зрозумів"
    - В іншому випадку — задавай додаткові запитання або висловлюй свою думку.

    Починай розмову нейтрально:  
    "Добрий день, мені потрібен шуруповерт."
    """

    return [
        {"role": "system", "content": system_prompt},
        {"role": "assistant", "content": "Добрий день, мені потрібен шуруповерт."}
    ]

def is_relevant_question_gpt(question, situation_description):
    prompt = f"""
    Чи є це питання релевантним для вибору шуруповерта в контексті цієї ситуації?
    Ситуація: {situation_description}
    
    Враховуй такі критерії:
    - Питань про технічні характеристики (потужність, акумулятор, крутний момент)
    - Питань про сферу застосування (дерево, метал, бетон)
    - Питань про функціональність (режими роботи, насадки)
    - Питань про сумісність або особливості використання

    Відповідай лише 'так' або 'ні'. Питання: "{question}"
    """
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            temperature=0,
            max_tokens=10
        )
        answer = response.choices[0].message["content"].lower()
        print(f"[DEBUG] Відповідь GPT на релевантність питання: {answer}")
        return "так" in answer
    except Exception as e:
        print(f"Помилка при перевірці релевантності: {str(e)}")
        return False

def match_model(user_input, available_models):
    user_model = re.sub(r'[^A-Z0-9-]', '', user_input.upper())
    # Точне співпадіння, а не пошук підрядка:
    for model in available_models:
        clean_model = re.sub(r'[^A-Z0-9-]', '', model.upper())
        if user_model == clean_model:
            return model
    return None

@app.route('/')
def home():
    if "unique_questions" not in session:
        session["unique_questions"] = []
    return render_template('index.html')

@app.route('/start_chat')
def start_chat():
    session['history'] = init_conversation()
    # Якщо треба, скинь інші параметри
    session["stage"] = 1
    session["question_count"] = 0
    session["model"] = None
    session["chat_active"] = True
    session["unique_questions"] = []
    return jsonify({"reply": session['history'][1]['content']})

@app.route("/restart-chat", methods=["POST"])
def restart_chat():
    keys_to_clear = [
        "history", "stage", "question_count", "model", "chat_active",
        "unique_questions", "misunderstood_count", "available_models",
        "wrong_model_attempts", "user_answers", "off_topic_count",
        "objection_round", "generated_questions", "current_question_index",
        "current_situation_id", "situation", "last_seller_reply",
        "current_objection", "hint_shown", "question_scores", "model_score", "total_score", "seller_replies"
    ]
    for key in keys_to_clear:
        session.pop(key, None)
    return jsonify({"message": "Сесію скинуто."})

@app.route("/show_models", methods=["POST"])
def show_models():
    session["stage"] = 2
    return jsonify({
        "models": session.get("available_models", []),
        "stage": 2
    })

def generate_report(session_data):
    seller_name = session_data.get('seller_name') or session.get('seller_name', 'Невідомий продавець')
    total_score = session_data.get('total_score', 0)
    max_score = 20  # або інше значення з вашого коду
    
    report_lines = [
        f"Звіт про діалог продавця: {seller_name}",
        f"Дата: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
        f"Оцінка: {total_score}/{max_score}",
        "\nДіалог:",
    ]
    
    # Додати всі репліки діалогу
    for message in session_data.get('conversation_log', []):
        role = "Клієнт" if message['role'] == 'assistant' else "Продавець"
        report_lines.append(f"{role} ({message['timestamp']}): {message['message']}")
    
    # Додати результати оцінювання
    report_lines.extend([
        "\nРезультати:",
        f"- Оцінка за модель: {session_data.get('model_score', 0)}/2",
        f"- Оцінка за питання: {sum(q['score'] for q in session_data.get('question_scores', []))}/10",
        f"- Оцінка за відповіді: {sum(a['score'] for a in session_data.get('user_answers', {}).values())}/6",
        f"- Оцінка за заперечення: {session_data.get('objection_score', 0)}/7"
    ])
    
    return "\n".join(report_lines)

@app.route("/chat", methods=["POST"])
def chat():
    print("Доступні моделі для вибору:", session.get("available_models"))
    user_input = request.json.get("message", "").strip()

    print(f"[DEBUG] Користувач написав: {user_input}")
    print(f"[DEBUG] Поточна стадія: {session.get('stage')}")

    # Ініціалізація змінних сесії
    session.setdefault("misunderstood_count", 0)
    session.setdefault("objection_round", 1)
    session.setdefault("question_scores", [])
    session.setdefault("user_answers", {})
    session.setdefault("seller_replies", [])

    if 'conversation_log' not in session:
        session['conversation_log'] = []

    session['conversation_log'].append({
        'role': 'user',
        'message': user_input,
        'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    })

    if "history" not in session or not session["history"]:
        session["history"] = init_conversation()
        session["stage"] = 1
        session["question_count"] = 0
        session["model"] = None
        session["chat_active"] = True
        session["unique_questions"] = []
        session["misunderstood_count"] = 0
        session["wrong_model_attempts"] = 0
        session["model_score"] = 0
        session["total_score"] = 0
        session["objection_round"] = 1

    # --- Stage 1: Питання клієнта ---
    if session["stage"] == 1:
        # Перевірка на нерелевантні питання
        if not is_relevant_question_gpt(user_input, session["situation"]["description"]):
            print(f"[SCORE] Нерелевантне питання: 0 балів | Поточний рахунок: {session.get('total_score', 0)}")
            session["misunderstood_count"] += 1
            session["question_scores"].append({"question": user_input, "score": 0})
            
            if session["misunderstood_count"] >= 3:
                session["chat_active"] = False
                return jsonify({
                    "reply": "Ви поставили декілька нерелевантних питань. Діалог завершено.",
                    "chat_ended": True,
                    "show_restart_button": True
                })
            return jsonify({
                "reply": "Ваше питання не стосується вибору шуруповерта. Спробуйте інше питання.",
                "chat_ended": False
            })

        # Обробка релевантних питань
        is_duplicate = user_input.lower() in [q.lower() for q in session["unique_questions"]]
        question_score = 2 if not is_duplicate else 1
        print(f"[SCORE] {'Нове' if not is_duplicate else 'Повторне'} питання: +{question_score} бал(и)")
        
        if not is_duplicate:
            session["unique_questions"].append(user_input)
            session["question_count"] += 1

        session["question_scores"].append({
            "question": user_input,
            "score": question_score
        })

        current_questions_score = sum(q["score"] for q in session["question_scores"])
        max_questions_score = 5 * 2  # Максимум 5 питань по 2 бали
        print(f"[SCORE] Загальний бал за питання: {current_questions_score}/{max_questions_score}")

        # Обмеження кількості питань (максимум 5)
        if session["question_count"] >= 6:
            session["stage"] = 2
            return jsonify({
                "reply": "Я відповів на достатньо питань. Тепер ви можете запропонувати мені модель шуруповерта.",
                "chat_ended": False,
                "stage": 2,
                "show_model_button": True
            })

        # Генерація відповіді GPT
        now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        # Додати повідомлення користувача до history і до conversation_log
        session["history"].append({"role": "user", "content": user_input})
        session['conversation_log'].append({
            'role': 'user',
            'message': user_input,
            'timestamp': now
        })

        try:
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=session["history"][-20:],
                temperature=0.5,
                max_tokens=150
            )
            answer = response.choices[0].message["content"].strip()

            # Додати відповідь GPT до history і до conversation_log
            session["history"].append({"role": "assistant", "content": answer})
            session['conversation_log'].append({
                'role': 'assistant',
                'message': answer,
                'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            })

            return jsonify({
                "reply": answer,
                "chat_ended": False,
                "stage": 1,
                "question_progress": session["question_count"],
                "show_model_button": session["question_count"] >= 3
            })
        except Exception as e:
            return jsonify({
                "reply": "Вибачте, сталася помилка при відповіді. Спробуйте ще раз.",
                "chat_ended": False
            })

    # --- Stage 2: Вибір моделі ---
    elif session["stage"] == 2:
        user_model = re.sub(r'[^A-Z0-9-]', '', user_input.upper())
        matched_models = [m for m in session["available_models"] if user_model in m.upper()]

        if not matched_models:
            session["chat_active"] = False
            session["model_score"] = 0
            return jsonify({
                "reply": f"Ви обрали «{user_input}», але такої моделі немає в списку. Завершую діалог.",
                "chat_ended": True,
                "show_restart_button": True
            })

        user_model = matched_models[0].upper()
        current_situation = next((s for s in SITUATIONS if s["id"] == session.get("current_situation_id")), None)
        if not current_situation:
            return jsonify({
                "reply": "Помилка: ситуація не знайдена.",
                "chat_ended": True,
                "show_restart_button": True
            })

        correct_models = [model.upper() for model in current_situation["correct_models"]]
        partially_correct_models = [model.upper() for model in current_situation.get("partially_correct_models", [])]

        # Оцінка моделі
        if user_model in correct_models:
            session["model_score"] = 2
            print(f"[SCORE] Правильна модель: +2 бали")
        elif user_model in partially_correct_models:
            session["model_score"] = 1
            print(f"[SCORE] Частково правильна модель: +1 бал")
        else:
            session["model_score"] = 0
            print(f"[SCORE] Неправильна модель: 0 балів")

            print(f"[SCORE] Поточний бал за модель: {session['model_score']}/2")
            print(f"[SCORE] Загальний бал: {session.get('total_score', 0) + session['model_score']}")

        if session["model_score"] > 0:  # Якщо модель підходить
            session["model"] = user_model
            session["stage"] = 3
            session["current_question_index"] = 0
            session["user_answers"] = {}

            # Генерація уточнюючих питань
            prompt = f"""Ти клієнт, який обрав шуруповерт {user_model} для {session['situation']['description']}.\n
            Згенеруй 3 питання про **крутний момент**, **зовнішню будову** та функції цього шуруповерта."""
            
            try:
                response = openai.ChatCompletion.create(
                    model="gpt-3.5-turbo",
                    messages=[
                        {"role": "system", "content": "Ти — клієнт, який має задати уточнюючі запитання про модель інструмента."},
                        {"role": "user", "content": prompt}
                    ],
                    temperature=0.6,
                    max_tokens=400
                )
                content = response.choices[0].message.get("content", "")
                questions = [line.strip(" 1234567890.-") for line in content.split('\n') if line.strip()]
                session["generated_questions"] = questions
                session.modified = True

                first_question = questions[0] if questions else "Яке перше ваше питання про цю модель?"

                return jsonify({
                    "reply": f"Добре, модель {user_model} мені підходить. Зараз задам кілька уточнюючих питань:\n\n{first_question}",
                    "chat_ended": False,
                    "stage": 3
                })
            except Exception as e:
                return jsonify({
                    "reply": "Вибачте, сталася помилка при генерації питань. Спробуйте ще раз.",
                    "chat_ended": False
                })
        else:
            session["chat_active"] = False
            return jsonify({
                "reply": f"Модель «{user_model}» не підходить до вашої задачі. Завершую діалог.",
                "chat_ended": True,
                "show_restart_button": True
            })

    # --- Stage 3: Уточнюючі питання ---
    elif session["stage"] == 3:
        if 'generated_questions' not in session:
            return jsonify({
                "reply": "Питання не знайдені. Давайте почнемо спочатку.",
                "chat_ended": True,
                "show_restart_button": True
            })

        index = session.get('current_question_index', 0)
        current_question = session['generated_questions'][index]

        # Оцінка відповіді
        gpt_prompt = f"""
Оціни відповідь користувача на питання.
Питання: "{current_question}"
Відповідь: "{user_input}"

Оціни за шкалою:
2 — відповідь містить правильну інформацію
1 — частково правильна або поверхнева
0 — не по темі або занадто загальна

Відповідай лише цифрою: 0, 1 або 2.
"""
        try:
            evaluation = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "Ти оцінюєш відповідь на запитання. Відповідай лише числом: 0, 1 або 2."},
                    {"role": "user", "content": gpt_prompt}
                ],
                temperature=0,
                max_tokens=10
            )
            score = int(evaluation.choices[0].message["content"].strip() or 0)
            print(f"[SCORE] Відповідь на питання {session['current_question_index']+1}: {score}/2 балів")
            
            session["user_answers"][current_question] = {
                "answer": user_input,
                "score": score
            }

            current_answers_score = sum(a["score"] for a in session["user_answers"].values())
            max_answers_score = 3 * 2  # 3 питання по 2 бали
            print(f"[SCORE] Загальний бал за відповіді: {current_answers_score}/{max_answers_score}")
            
            session['current_question_index'] += 1

            # Перевірка чи залишились питання
            if session['current_question_index'] < len(session['generated_questions']):
                next_question = session['generated_questions'][session['current_question_index']]
                return jsonify({
                    "reply": next_question,
                    "chat_ended": False
                })
            else:
                # Перехід до Stage 4 (заперечення)
                session["stage"] = 4
                answers_score = sum(a["score"] for a in session["user_answers"].values())
                
                if answers_score >= 5:
                    feedback = "Гарний шуруповерт"
                elif answers_score >= 3:
                    feedback = "Шуруповерт непоганий."
                else:
                    feedback = "Зрозуміло."

                objections = [
                    "Мені здається, це трохи дорогувато.",
                    "А це точно не якась китайська модель?",
                    "Ваша гарантія точно працює?",
                    "Я бачив в інтернеті дешевше."
                ]
                session["current_objection"] = random.choice(objections)
                session["objection_round"] = 1

                return jsonify({
                    "reply": f"{feedback}\n\nХм... {session['current_objection']}",
                    "chat_ended": False,
                    "stage": 4
                })
        except Exception as e:
            return jsonify({
                "reply": "Виникла помилка при оцінюванні відповіді. Спробуйте ще раз.",
                "chat_ended": False
            })

    # --- Stage 4: Обробка заперечень ---
    elif session["stage"] == 4:
        objection = session.get("current_objection", "Заперечення")
        seller_reply = user_input
        session["seller_replies"].append(seller_reply)
        current_round = session.get("objection_round", 1)

        if current_round <= 2:
            try:
                history = "\n".join([f"Раунд {i+1}: {reply}" for i, reply in enumerate(session["seller_replies"])])
                gpt_prompt = f"""
    Ти — клієнт, який має заперечення: "{objection}".

    Ось як продавець відповідав до цього моменту:
    {history}

    Відповідай як реалістичний клієнт. Реагуй природно на останню репліку продавця: "{seller_reply}".
    Підтримуй контекст заперечення. Будь конкретним, але не надто коротким."""
                
                response = openai.ChatCompletion.create(
                    model="gpt-3.5-turbo",
                    messages=[
                        {"role": "system", "content": "Ти — клієнт у діалозі з продавцем. Відповідай чесно, логічно і згідно з контекстом заперечення."},
                        {"role": "user", "content": gpt_prompt}
                    ],
                    temperature=0.6,
                    max_tokens=200
                )
                reply = response.choices[0].message["content"].strip()
                session["objection_round"] += 1
                session.modified = True

                return jsonify({
                    "reply": reply,
                    "chat_ended": False,
                    "current_round": session["objection_round"]
                })
            except Exception as e:
                return jsonify({
                    "reply": "Вибачте, сталася помилка під час відповіді. Спробуйте ще раз.",
                    "chat_ended": False
                })

        elif current_round == 3:
            try:
                if not session.get("seller_replies"):
                    return jsonify({
                        "reply": "Помилка: відсутні відповіді для оцінювання.",
                        "chat_ended": True,
                        "show_restart_button": True
                    })

                full_history = "\n".join([f"Раунд {i+1}: {reply}" for i, reply in enumerate(session["seller_replies"])])
                evaluation_prompt = f"""
    Ти — експерт з продажів, який оцінює відповіді продавця на заперечення клієнта.

    Заперечення клієнта: "{objection}"

    Ось відповіді продавця (по раундах):
    {full_history}

    Проаналізуй відповіді продавця за 4 критеріями:
    1. Чіткість аргументів
    2. Відповідність запереченню
    3. Наявність доказів, прикладів або логіки
    4. Логічна послідовність і побудова

    Аргумент — це чітке пояснення з доказом, прикладом або логікою, яке прямо стосується заперечення.

    🔻 Оціни рівень переконливості за шкалою:
    - "переконливо" — якщо є **2 або більше сильні аргументи** – 7 балів
    - "частково переконливо" — якщо є **1 сильний аргумент** – 3 бали
    - "непереконливо" — якщо **немає** жодного аргументу або відповідь не по темі – 0 балів

    Відповідай одним словом: "переконливо", "частково переконливо" або "непереконливо". Не додавай пояснень.
    """
                response = openai.ChatCompletion.create(
                    model="gpt-3.5-turbo",
                    messages=[
                        {"role": "system", "content": "Ти — експерт з оцінки комунікацій. Будь об'єктивним."},
                        {"role": "user", "content": evaluation_prompt}
                    ],
                    temperature=0.3,
                    max_tokens=50
                )
                rating = response.choices[0].message["content"].strip().lower()
                rating = rating.splitlines()[0].strip()
                
                if rating == "переконливо":
                    objection_score = 7
                elif rating == "частково переконливо":
                    objection_score = 3
                elif rating == "непереконливо":
                    objection_score = 0
                else:
                    objection_score = 0

                print(f"[SCORE] Оцінка аргументів: {rating} ({objection_score}/7 балів)")

                model_score = session.get("model_score", 0)
                questions_score = sum(q["score"] for q in session.get("question_scores", [])) / 2
                answers_score = sum(a["score"] for a in session.get("user_answers", {}).values())
                total_score = model_score + questions_score + answers_score + objection_score
                max_score = 2 + 5 + 6 + 7

                print("\n=== ФІНАЛЬНИЙ РАХУНОК ===")
                print(f"[SCORE] За модель: {model_score}/2")
                print(f"[SCORE] За питання: {questions_score}/5")
                print(f"[SCORE] За відповіді: {answers_score}/6")
                print(f"[SCORE] За заперечення: {objection_score}/7")
                print(f"[SCORE] ЗАГАЛЬНИЙ БАЛ: {total_score}/20")

                if total_score >= max_score * 0.8:
                    feedback = "🔝 Чудово! Ви дуже впевнено провели клієнта до покупки."
                elif total_score >= max_score * 0.6:
                    feedback = "👍 Ваші відповіді були хорошими, але є над чим попрацювати."
                else:
                    feedback = "⚠️ Є недоліки в підході до клієнта. Рекомендується додаткове навчання."

                if "переконливо" in rating:
                    reply = "Дякую за розгорнуті відповіді! Ваші аргументи дуже переконливі. Я готовий до співпраці."
                elif "частково" in rating:
                    reply = "Дякую за розгорнуті відповіді. Деякі аргументи є переконливими, але у мене залишились сумніви."
                else:
                    reply = "Дякую за розгорнуті відповіді. На жаль, вони не розсіяли мої сумніви. Дякую за спробу."

                full_reply = f"{reply}\n\n📊 Ваша оцінка: {total_score}/{max_score}\n{feedback}"

                # Збереження звіту
                report_content = generate_report(session)
                report_filename = f"report_{session.get('seller_name', 'unknown')}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
                
                # Створення папки reports, якщо її немає
                os.makedirs('reports', exist_ok=True)
                
                send_email_report(
                    subject=f"Звіт про діалог — {session.get('seller_name', 'Продавець')}",
                    body=report_content,
                    to_email="voloshchenko2014@gmail.com"
                )

                session.clear()
                session.modified = True

                return jsonify({
                    "reply": f"{full_reply}\n\nЗвіт збережено для вашого тренера.",
                    "chat_ended": True,
                    "show_restart_button": True,
                    "report_filename": report_filename
                })
            
            except Exception as e:
                print(f"Помилка при оцінюванні: {str(e)}")
                return jsonify({
                    "reply": "Вибачте, не вдалося обробити відповідь. Давайте спробуємо ще раз?",
                    "chat_ended": False
                })

    return jsonify({
        "reply": "Виникла непередбачена помилка. Спробуйте ще раз.",
        "chat_ended": True,
        "show_restart_button": True
    })
    
if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)