from flask import Blueprint, request, jsonify, session
import os, tempfile
from config import client

speech_bp = Blueprint("speech", __name__)

# üé§ Speech-to-Text (—Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è)
@speech_bp.route("/speech-to-text", methods=["POST"])
def speech_to_text():
    if "file" not in request.files:
        return jsonify({"error": "–§–∞–π–ª –Ω–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∏–π"}), 400

    audio_file = request.files["file"]

    try:
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è –ø–æ —ñ–º–µ–Ω—ñ —Ñ–∞–π–ª—É
        ext = ".webm"
        filename = audio_file.filename.lower()
        if filename.endswith(".m4a") or filename.endswith(".mp4"):
            ext = ".mp4"
        elif filename.endswith(".wav"):
            ext = ".wav"

        # –¢–∏–º—á–∞—Å–æ–≤–æ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —É –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ
        with tempfile.NamedTemporaryFile(delete=False, suffix=ext) as tmp:
            audio_file.save(tmp.name)
            with open(tmp.name, "rb") as f:
                transcript = client.audio.transcriptions.create(
                    model="gpt-4o-mini-transcribe",
                    file=f,
                    prompt="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≥–æ–≤–æ—Ä–∏—Ç—å –ª–∏—à–µ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é"
                )
        os.unlink(tmp.name)

        text = transcript.text.strip()
        return jsonify({"text": text})

    except Exception as e:
        print(f"[STT ERROR] {str(e)}")
        return jsonify({"error": "–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è"}), 500


# üîä Text-to-Speech (–æ–∑–≤—É—á–∫–∞)
@speech_bp.route("/speak", methods=["POST"])
def speak():
    text = request.json.get("text", "").strip()
    if not text:
        return jsonify({"error": "–ü–æ—Ä–æ–∂–Ω—ñ–π —Ç–µ–∫—Å—Ç"}), 400
    
    category = session.get("category", None)
    if category != "exam":   # ‚Üê —Ç—É—Ç –∑–∞–ª–∏—à —É–º–æ–≤–Ω–∏–π —Ñ—ñ–ª—å—Ç—Ä (–∞–±–æ –ø—Ä–∏–±–µ—Ä–∏, —è–∫—â–æ –æ–∑–≤—É—á–∫–∞ –≤—Å—é–¥–∏ –¥–æ–∑–≤–æ–ª–µ–Ω–∞)
        return jsonify({"error": "–û–∑–≤—É—á–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Ü—ñ—î—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"}), 403

    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≤–∂–µ –≤–∏–∑–Ω–∞—á–µ–Ω–∏–π –≥–æ–ª–æ—Å
    voice = session.get("voice", "alloy")

    try:
        response = client.audio.speech.create(
            model="gpt-4o-mini-tts",
            voice=voice,
            input=text
        )
        with tempfile.NamedTemporaryFile(delete=False, suffix=".mp3") as tmp:
            tmp.write(response.read())
            tmp_path = tmp.name
        with open(tmp_path, "rb") as f:
            audio_data = f.read()
        os.unlink(tmp_path)
        return audio_data, 200, {
            "Content-Type": "audio/mpeg",
            "Content-Disposition": f"inline; filename={voice}.mp3"
        }
    except Exception as e:
        print(f"[TTS ERROR] {str(e)}")
        return jsonify({"error": "–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∞—É–¥—ñ–æ"}), 500
