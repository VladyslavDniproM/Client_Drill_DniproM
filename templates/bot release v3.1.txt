<!DOCTYPE html>
<html lang="uk">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Тестування продавців-консультантів</title>
    <style>
/* === RESET === */
*, *::before, *::after {
  box-sizing: border-box;
}

html, body {
  margin: 0;
  padding: 0;
  overflow-x: hidden;
}

/* === BASE === */
body {
background-image: url("/static/Iv-2.jpg");
  background-image: linear-gradient(
        rgba(0, 0, 0, 0.5), 
        rgba(0, 0, 0, 0.5)
      ),
      url("/static/Iv-2.jpg");
  background-size: cover;         /* або contain — залежно від бажаного ефекту */
  background-repeat: no-repeat;
  background-position: center;
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  padding: 20px;
  min-height: 100dvh;
  display: flex;
  flex-direction: column;
  justify-content: flex-end;
  align-items: center;
  background-color: #ffffff;
  color: #000000;
  padding-top: 140px;
}

.top-panel {
  position: fixed;
  top: 20px;
  left: 50%;
  transform: translateX(-50%);
  width: 750px;
  max-width: 1000px;

  display: flex;
  flex-direction: column;
  align-items: center;         /* по центру по горизонталі */
  justify-content: center;     /* по центру по вертикалі */

  background: linear-gradient(
    to bottom,
    rgba(255, 255, 255, 0.3),
    rgba(255, 255, 255, 0.05)
  );
  backdrop-filter: blur(16px);
  -webkit-backdrop-filter: blur(16px);

  padding: 16px 24px;
  border-radius: 20px;
  box-shadow: 0 8px 24px rgba(0, 0, 0, 0.1);
  z-index: 500;
  text-align: center;
}

.background-overlay {
  position: fixed;
  top: 0; left: 0;
  width: 100vw; height: 100vh;
  background-color: rgba(0, 0, 0, 0.742); /* або 0.2-0.5 */
  z-index: -1;
}

/* === HEADER === */
h1 {
  color: #ffffff;
  text-align: center;
  padding: 5px;
  font-size: clamp(18px, 4vw, 24px);
  margin: 0.5em 0;
}

/* === CHAT CONTAINER === */
.chat-container {
  background: transparent;
  backdrop-filter: none;
  border-radius: 0;
  box-shadow: none;
  padding: 20px;
  max-height: 50dvh;
  overflow-y: auto;
  display: flex;
  flex: 1;
  flex-direction: column;
  flex-grow: 1;
  pointer-events: auto;
}

.chat-shell {
  position: fixed;
  bottom: 20px;
  left: 50%;
  transform: translateX(-50%);

  width: 750px;
  max-width: 1000px;
  height: 28vh;
  overflow: hidden;

  display: flex;
  flex-direction: column;

  background: linear-gradient(to top, rgba(255, 255, 255, 0.3), rgba(255, 255, 255, 0.05));
  backdrop-filter: blur(16px);
  -webkit-backdrop-filter: blur(16px);

  border-radius: 20px;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
  z-index: 999;
}

/* === MESSAGES === */
.message {
  margin-bottom: 15px;
  padding: 10px 15px;
  border-radius: 18px;
  max-width: 80%;
  line-height: 1.4;
  animation: fadeIn 0.3s ease;
  word-wrap: break-word;
}
@keyframes fadeIn {
  from { opacity: 0; transform: translateY(10px); }
  to   { opacity: 1; transform: translateY(0); }
}
.bot-message {
  background-color: #e0e0e0;
  color: #333;
  align-self: flex-start;
  border-radius: 18px 18px 5px 18px;
}
.user-message {
  background-color: #ff6f00;
  color: white;
  align-self: flex-end;
  border-radius: 18px 18px 18px 5px;
}

/* === INPUT AREA === */
.input-area {
  display: flex;
  gap: 10px;
  padding: 16px 20px;
  background: transparent;
  border-top: 1px solid rgba(255, 255, 255, 0.2); /* тонка межа */
}
#user-input {
  flex-grow: 1;
  padding: 12px;
  border: 1px solid #ddd;
  border-radius: 20px;
  font-size: clamp(14px, 3vw, 16px);
  min-height: 20px;
  max-height: 120px;
  resize: vertical;
  pointer-events: auto;
}
#send-button {
  background-color: #ff6f00;
  color: white;
  border: none;
  padding: 0 clamp(10px, 3vw, 20px);
  border-radius: 20px;
  cursor: pointer;
  font-size: clamp(14px, 3vw, 16px);
  box-shadow: 0 2px 6px rgba(0,0,0,0.2);
  min-width: 60px;
  height: 44px;
}

#send-button:hover {
  background-color: #e65c00;
}
#send-button:disabled {
  background-color: #cccccc;
  cursor: not-allowed;
}

/* === STAGE INDICATOR === */
.stage-indicator-single {
  display: flex;
  justify-content: center;
  align-items: center;
  padding: 6px 12px;
  border-radius: 16px;
  margin-top: 12px;
  background: rgba(255, 255, 255, 0.15);
  backdrop-filter: blur(8px);
  -webkit-backdrop-filter: blur(8px);
  width: 540px;
  max-width: 800px;
  font-weight: bold;
  font-size: 14px;
  color: white;
  transition: all 0.3s ease;
}

.stage-indicator-single .stage {
  opacity: 0;
  transform: translateY(10px);
  animation: fadeStage 0.4s forwards;
}

@keyframes fadeStage {
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* === STATUS / TYPING === */
.status {
  font-style: italic;
  font-size: clamp(12px, 2.5vw, 14px);
  color: #ffffff;
  text-align: center;
  width: 90%;
  max-width: 800px;
  margin: 0 auto;
}
.typing-indicator {
  display: inline-block;
  padding: 10px;
  margin-left: 10px;
}
.typing-dot {
  display: inline-block;
  width: 8px;
  height: 8px;
  border-radius: 50%;
  background-color: #999;
  margin: 0 2px;
  animation: typingAnimation 1.4s infinite ease-in-out;
}
.typing-dot:nth-child(1) { animation-delay: 0s; }
.typing-dot:nth-child(2) { animation-delay: 0.2s; }
.typing-dot:nth-child(3) { animation-delay: 0.4s; }
@keyframes typingAnimation {
  0%, 60%, 100% { transform: translateY(0); }
  30% { transform: translateY(-5px); }
}

.modal-content input {
    width: 100%;
    padding: 12px;
    margin: 10px 0;
    border: 1px solid #ddd;
    border-radius: 5px;
    font-size: 16px;
}

.modal-content button {
    width: 100%;
    padding: 12px;
    margin-top: 10px;
    font-size: 16px;
    cursor: pointer;
}

/* === RESTART BUTTON === */
#restart-button {
  display: none;
  position: fixed;
  top: 15px;
  right: 15px;
  z-index: 9999;
  background-color: #ff4d4f;
  color: white;
  border: none;
  border-radius: 8px;
  padding: 10px 14px;
  font-size: clamp(12px, 2.5vw, 14px);
  cursor: pointer;
  box-shadow: 0 4px 8px rgba(0,0,0,0.2);
}
#restart-button:hover {
  background-color: #ff0000a5;
}

.chat-blur-overlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 40px;
  pointer-events: none;

  background: transparent;
  mask-image: linear-gradient(to bottom, black 0%, transparent 100%);
  -webkit-mask-image: linear-gradient(to bottom, black 0%, transparent 100%);

  backdrop-filter: blur(14px);
  -webkit-backdrop-filter: blur(14px);
  z-index: 5;
}

#choose-model-btn {
  display: none;
  position: absolute;
  right: 80px; /* Відступ від правого краю чату */
  bottom: 50%; /* Вертикальне центрування */
  transform: translateY(50%);
  z-index: 999;
  background-color: #ff6f00;
  color: white;
  border: none;
  border-radius: 25px 25px 25px 25px; /* Скруглення тільки зліва */
  padding: 25px 25px 25px 25px;
  font-size: clamp(14px, 3vw, 16px);
  text-align: center;
  font-weight: bold;
  cursor: pointer;
  box-shadow: -4px 4px 12px rgba(0, 0, 0, 0.15);
  transition: all 0.3s ease;
  white-space: nowrap;
  max-width: 200px;
}

#choose-model-btn:hover {
  background-color: #e65c00;
  right: 80px; /* Зсуваємо ближче до чату при наведенні */
  box-shadow: -2px 4px 16px rgba(0, 0, 0, 0.2);
}

/* Адаптація для малих екранів */
@media (max-width: 900px) {
  #choose-model-btn {
    right: -100px;
    padding: 12px 12px 12px 20px;
    font-size: 14px;
  }
}

/* === MODELS SELECTION === */
#models-container {
  display: none;
  margin-top: 15px;
  text-align: center;
  width: 90%;
  max-width: 800px;
  margin: 15px auto 0;
}
#models-buttons {
  display: flex;
  flex-wrap: wrap;
  gap: 10px;
  justify-content: center;
  margin-top: 10px;
}
.model-button {
  min-width: 180px;
  flex: 0 0 auto;
  border: 1px solid #ccc;
  border-radius: 8px;
  padding: 10px;
  background-color: #fff;
  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
  cursor: pointer;
  transition: transform 0.2s ease;
}
.model-button:hover {
  background-color: #ff6f00;
  transform: scale(1.03);
}

/* === MODEL OVERLAY === */
.model-overlay {
  position: fixed;
  top: 0; left: 0;
  width: 100vw; height: 100vh;
  background: rgba(0, 0, 0, 0.6);
  display: none;
  justify-content: center;
  align-items: center;
  z-index: 9999;
}
.model-selector {
  background: #fff;
  padding: 20px;
  border-radius: 12px;
  display: flex;
  align-items: center;
  max-width: 90%;
  overflow: hidden;
}
.models-scroll {
  display: flex;
  overflow-x: auto;
  gap: 16px;
  padding: 10px;
  scroll-behavior: smooth;
  max-width: 80vw;
  -webkit-overflow-scrolling: touch;
  scrollbar-width: thin;
  scrollbar-color: #ccc transparent;
}
.arrow {
  font-size: 28px;
  font-weight: bold;
  cursor: pointer;
  user-select: none;
  padding: 10px;
  color: #333;
}
.arrow:hover {
  color: #ff6600;
}

/* === PROGRESS === */
.progress-hint {
  color: #ffffff;
  font-size: clamp(10px, 2vw, 12px);
  text-align: center;
  width: 90%;
  max-width: 800px;
  margin: 3px auto;
}
.progress-container {
  margin-top: 10px;
  width: 90%;
  max-width: 800px;
  height: 10px;
  background-color: #eee;
  border-radius: 5px;
  overflow: hidden;
  transition: opacity 0.5s ease;
}
.progress-bar {
  height: 100%;
  width: 0%;
  background-color: #4caf50;
  transition: width 0.3s ease-out;
  animation: pulse 1.5s infinite;
}
@keyframes pulse {
  0% { opacity: 1; }
  50% { opacity: 0.7; }
  100% { opacity: 1; }
}
.fade-out {
  opacity: 0;
  transition: opacity 1s ease-out;
}

/* === MODAL === */
.modal {
  position: fixed;
  z-index: 9999;
  top: 0; left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0,0,0,0.6);
  display: flex;
  justify-content: center;
  align-items: center;
  opacity: 1;
  visibility: visible;
  transition: opacity 0.3s ease, visibility 0.3s ease;
}
.modal.hidden {
  opacity: 0;
  visibility: hidden;
}
.modal-content {
  background: rgb(0, 225, 255);
  padding: 20px 30px;
  border-radius: 8px;
  width: 90%;
  max-width: 400px;
  text-align: left;
  overflow-y: auto;
}
.modal-content h2 {
  font-size: clamp(18px, 4vw, 22px);
}
.modal-content ul {
  font-size: clamp(14px, 3vw, 16px);
  padding-left: 20px;
}
.modal-content button {
  padding: 20px 30px;
  font-weight: bold;
  font-size: clamp(14px, 3vw, 16px);
  cursor: pointer;
}

/* Додаткові стилі для підказки */
#model-hint-modal .modal-content {
  background: #4CAF50; /* Зелений колір для підказки */
  text-align: center;
}

#client-character {
  position: fixed;
  bottom: 40px;
  left: 50%;
  transform: translateX(-50%) translateY(20px); /* трохи нижче на старті */
  opacity: 0;
  z-index: 501;
  animation: fadeInUp 0.5s ease-out 1.0s forwards; /* 1.5s затримка */
}

@keyframes fadeInUp {
  0% {
    opacity: 0;
    transform: translateX(-50%) translateY(20px);
  }
  100% {
    opacity: 1;
    transform: translateX(-50%) translateY(0);
  }
}

#model-hint-modal button {
  background: white;
  color: #4CAF50;
  border: none;
  margin-top: 15px;
  border-radius: 5px;
}

#model-hint-modal.hidden {
  display: none;
}

/* ===== МОБІЛЬНА АДАПТАЦІЯ ===== */
@media (max-width: 600px) {

  .top-panel {
    width: 95%;
    padding: 12px 16px;
    border-radius: 12px;
  }

  .stage-indicator-single {
    width: auto;
    font-size: 12px;
    padding: 4px 10px;
  }

  .progress-hint {
    font-size: 11px;
  }

  .progress-container {
    height: 8px;
  }

  .chat-shell {
    width: 100%;
    left: 0;
    transform: none;
    border-radius: 0;
    bottom: 0;
    height: 42vh;
  }

  .chat-container {
    padding: 10px;
    max-height: 30vh;
  }

  .message {
    max-width: 95%;
    padding: 8px 12px;
    font-size: 14px;
  }

  .input-area {
    flex-direction: column;
    padding: 10px;
    gap: 6px;
  }

  #user-input {
    padding: 10px;
    font-size: 14px;
    min-height: 30px;
  }

  #send-button {
    width: 100%;
    height: 42px;
    font-size: 14px;
  }

  #client-character img {
    max-height: 280px;
  }

  .modal-content {
    width: 95%;
    padding: 15px 20px;
  }

  .modal-content button {
    padding: 15px 20px;
    font-size: 14px;
  }

  #choose-model-btn {
    right: 10px;
    bottom: 60%;
    padding: 14px;
    font-size: 13px;
    max-width: 150px;
    white-space: normal;
  }
}
@media (min-width: 601px) and (max-width: 900px) {
  .chat-shell {
    width: 80%;
    height: 36vh;
  }

  .top-panel {
    width: 90%;
  }

  .message {
    font-size: 15px;
  }

  #send-button {
    font-size: 15px;
  }

  .stage-indicator-single {
    font-size: 13px;
  }
}

</style>
</head>
<body>
<div class="top-panel">
  <div class="progress-hint" id="progressHint">Зарахованих питань: 0 / 7</div>
  <div class="progress-container" id="progressContainer">
    <div class="progress-bar" id="questionProgressBar"></div>
  </div>

  <div id="top-title-area">
    <h1 id="welcome-title">Клієнт зайшов до Вашого магазину...</h1>

    <div id="stage-indicator" class="stage-indicator-single" style="display: none;">
      <div id="stage-label" class="stage active">Етап: Виявлення потреби</div>
    </div>
  </div>
</div>

    <button id="choose-model-btn" style="display: none;">Оберіть модель</button>

    <div class="chat-shell">
      <div class="chat-blur-overlay"></div>
      <div class="chat-container" id="chat-container">
        <!-- Чат буде додаватись сюди -->
      </div>

    <div class="input-area">
        <input
            type="text"
            id="user-input"
            placeholder="Напишіть ваше повідомлення..."
            autocomplete="off"
        />
        <button id="send-button">Надіслати</button>
      </div>
    </div>

    <div id="client-character" style="
      display: none;
      position: fixed;
      bottom: 80px;
      left: 50%;
      transform: translateX(-50%);
      z-index: 1;
      opacity: 0;
      transition: opacity 0.2s ease;
    ">
      <img id="client-avatar" src="" alt="Клієнт" style="
        max-height: 520px;
        border-radius: 16px;
        filter: drop-shadow(0 0 8px rgba(0,0,0,0.3));
      ">
    </div>

    <div id="auth-modal" class="modal">
      <div class="modal-content">
          <h2>Введіть ваші дані</h2>
          <p>Будь ласка, вкажіть ваше ПІБ для початку роботи:</p>
          <input 
              type="text" 
              id="seller-name-input" 
              placeholder="ПІБ (наприклад, Іванов Іван Іванович)" 
              style="width: 100%; padding: 10px; margin: 10px 0; border: 1px solid #ccc; border-radius: 5px;"
          >
          <button id="submit-name-btn" style="background-color: #4CAF50; color: white; border: none; padding: 10px 20px; border-radius: 5px; cursor: pointer;">Продовжити</button>
      </div>
  </div>

    <!-- Контейнер для вибору моделей (залишився, але не показуємо) -->
    <div id="models-container" style="display:none;">
        <p id="models-prompt"></p>
        <div id="models-buttons">
            <!-- Кнопки моделей будуть додані динамічно -->
        </div>
    </div>

    <!-- Overlay для вибору моделей -->
    <div id="modelOverlay" class="model-overlay">
        <div class="model-selector">
            <div id="modelLeftArrow" class="arrow">←</div>
            <div id="modelsButtons" class="models-scroll"></div>
            <div id="modelRightArrow" class="arrow">→</div>
        </div>
    </div>

    <div class="status" id="status"></div>

    <div style="text-align: center;">
        <button id="restart-button">Почати новий діалог</button>
    </div>

    <div id="model-hint-modal" class="modal hidden">
      <div class="modal-content">
        <h2>Порада</h2>
        <p>Тепер ви можете обрати модель інструменту, яка відповідає потребам клієнта. Але не спішіть: краще поставте ще декілька запитань!</p>
        <button id="close-hint-btn">Зрозуміло</button>
      </div>
    </div>

    <div id="rules-modal" class="modal">
        <div class="modal-content">
            <h2>Правила комунікації з ботом</h2>
            <ul>
                <li>Будьте ввічливими та конкретними.</li>
                <li>Ставте чіткі питання.</li>
                <li>Не використовуйте нецензурну лексику.</li>
                <li>Після 3-х непорозумінь сесія завершиться.</li>
                <li>Якщо виникають проблеми — натисніть "Почати заново".</li>
            </ul>
            <button id="accept-rules-btn">Я ознайомився і готовий</button>
        </div>
    </div>

    <script>
        const chatContainer = document.getElementById("chat-container");
        const userInput = document.getElementById("user-input");
        const sendButton = document.getElementById("send-button");
        const statusElement = document.getElementById("status");
        const restartButton = document.getElementById("restart-button");
        const modelsContainer = document.getElementById("models-container");
        const modelsButtons = document.getElementById("modelsButtons"); // Оновлено, щоб використовувати overlay
        const modelsPrompt = document.getElementById("models-prompt");
        const progressHint = document.getElementById("progressHint");
        const questionProgressBar = document.getElementById("questionProgressBar");
        const modal = document.getElementById("rules-modal");
        const acceptBtn = document.getElementById("accept-rules-btn");
        const modelOverlay = document.getElementById("modelOverlay");
        const modelLeftArrow = document.getElementById("modelLeftArrow");
        const modelRightArrow = document.getElementById("modelRightArrow");

        // Події
        sendButton.addEventListener("click", sendMessage);
        userInput.addEventListener("keypress", (e) => {
            if (e.key === "Enter") sendMessage();
        });
        restartButton.addEventListener("click", () => window.location.reload());

        modelLeftArrow.onclick = () => {
            modelsButtons.scrollBy({ left: -300, behavior: "smooth" });
        };

        modelRightArrow.onclick = () => {
            modelsButtons.scrollBy({ left: 300, behavior: "smooth" });
        };

        function blockChat() {
            userInput.disabled = true;
            sendButton.disabled = true;
        }

        function unblockChat() {
            userInput.disabled = false;
            sendButton.disabled = false;
        }

        acceptBtn.addEventListener("click", () => {
            modal.classList.add("hidden");
            setTimeout(() => {
                modal.style.display = "none";
                unblockChat();
                userInput.focus();
            }, 300);
            unblockChat();
            userInput.focus();
        });

        function addMessage(text, isUser) {
            const messageDiv = document.createElement("div");
            messageDiv.classList.add("message");
            messageDiv.classList.add(isUser ? "user-message" : "bot-message");
            messageDiv.textContent = text;
            chatContainer.appendChild(messageDiv);
            chatContainer.scrollTop = chatContainer.scrollHeight;
        }

        function showTypingIndicator() {
            const typingDiv = document.createElement("div");
            typingDiv.classList.add("typing-indicator");
            typingDiv.id = "typing-indicator";
            typingDiv.innerHTML = `
                <div class="typing-dot"></div>
                <div class="typing-dot"></div>
                <div class="typing-dot"></div>
            `;
            chatContainer.appendChild(typingDiv);
            chatContainer.scrollTop = chatContainer.scrollHeight;
        }

        function hideTypingIndicator() {
            const typingIndicator = document.getElementById("typing-indicator");
            if (typingIndicator) typingIndicator.remove();
        }

        function disableChat() {
            userInput.disabled = true;
            sendButton.disabled = true;
            hideModelButtons();
            statusElement.textContent = "Діалог завершено";
        }

        function showStageIndicator() {
          const h1 = document.getElementById('welcome-title');
          const indicator = document.getElementById('stage-indicator');

          h1.style.display = 'none';
          indicator.style.display = 'flex'; // або 'block' для вертикального вигляду
        }

        function showModelHint() {
          const hintModal = document.getElementById("model-hint-modal");
          hintModal.classList.remove("hidden");
        }

        function hideModelHint() {
          const hintModal = document.getElementById("model-hint-modal");
          hintModal.classList.add("hidden");
        }

        // Обробник для кнопки закриття
        document.getElementById("close-hint-btn").addEventListener("click", hideModelHint);

        // Оновіть функцію updateProgressBar
      function updateProgressBar(progress, maxQuestions = 5) {
          const percent = (Math.min(progress, maxQuestions) / maxQuestions) * 100;
          questionProgressBar.style.width = `${percent}%`;

          console.log(`Current progress: ${progress}`);

          if (progress < maxQuestions) {
              progressHint.textContent = `Запитань поставлено: ${progress} / ${maxQuestions}`;
              progressHint.style.opacity = "1";
              document.getElementById("progressContainer").style.opacity = "1";
              progressHint.style.display = "block";
              document.getElementById("progressContainer").style.display = "block";

              if (progress >= 3) {
                  document.getElementById("choose-model-btn").style.display = "inline-block";
                  showModelHint();
              } else {
                  document.getElementById("choose-model-btn").style.display = "none";
              }
          } else {
              progressHint.textContent = "Максимальна кількість питань!";
              setTimeout(() => {
                  progressHint.style.opacity = "0";
                  document.getElementById("progressContainer").style.opacity = "0";
              }, 1500);
              setTimeout(() => {
                  progressHint.style.display = "none";
                  document.getElementById("progressContainer").style.display = "none";
              }, 2000);
          }
      }

        function showModelButtons(models, promptText = "Оберіть модель:", attemptsLeft = 1) {
          const modelData = {
              "CD-218Q": {
                  image: "/static/218Q.png",
                  specs: [
                      "24 Нм",
                      "Швидкоз'ємний патрон",
                      "Йде без акумулятора",
                      "Легкий та компактний",
                  ],
              },
              "CD-12QX": {
                  image: "/static/CD12QX.png",
                  specs: [
                      "25 Нм",
                      "Повний комплект",
                      "Для нескладних завдань",
                      "Повний комплект, в акції",
                  ],
              },
              "CD-201HBC": {
                  image: "/static/201HBC.png",
                  specs: [
                      "45 Нм",
                      "Безщітковий двигун",
                      "Для роботи навіть із цеглою",
                      "Йде без акумулятора",
                  ],
              },
              "CD-200BCULTRA": {
                  image: "/static/200BCULTRA.png",
                  specs: [
                      "60 Нм",
                      "Металевий патрон",
                      "Найсильніший шуруповерт",
                      "Йде без акумулятора",
                  ],
              },
              "CD-200BCCOMPACT": {
                  image: "/static/CD-200BCCOMPACT.png",
                  specs: [
                      "40 Нм",
                      "Металевий патрон",
                      "Найточніший шуруповерт",
                      "Йде без акумулятора",
                  ],
              },
              "CD-12CX": {
                  image: "/static/CD12CX.png",
                  specs: [
                      "30 Нм",
                      "Компактний та недорогий",
                      "Пластиковий патрон",
                      "Повний комлпект, в акції",
                  ],
              },
              "CD-12BC": {
                  image: "/static/CD-12BC.png",
                  specs: [
                      "40 Нм",
                      "Металевий патрон",
                      "Максимально компактний",
                      "Йде без акумулятора",
                  ],
              },
              "GS-140SE": {
                  image: "/static/gs140se.png",
                  specs: [
                      "1400 Вт",
                      "125 мм діаметр диску",
                      "Регулювання та підтримка обертів",
                      "Коротка ручка",
                  ],
              },
              "GL-160SE": {
                  image: "/static/gl160se.png",
                  specs: [
                      "1600 Вт",
                      "150 мм діаметр диску",
                      "Регулювання обертів та підтримка потужності",
                      "Довга ручка",
                  ],
              },
              "GS-98": {
                  image: "/static/gs98.png",
                  specs: [
                      "980 Вт",
                      "125 мм діаметр диску",
                      "Найдешевша та найпопулярніша КШМ",
                      "Коротка ручка",
                  ],
              },
              "GS-100S": {
                  image: "/static/gs100s.png",
                  specs: [
                      "1000 Вт",
                      "125 мм діаметр диску",
                      "Компактна КШМ із регулятором обертів",
                      "Коротка ручка",
                  ],
              },
              "CG-12BC": {
                  image: "/static/cg12bc.png",
                  specs: [
                      "76 мм діаметр диску",
                      "12V болгарка",
                      "Максимально компактна",
                      "Має плавний пуск та захист від випадкового ввімкнення",
                  ],
              },
              "GL-125S": {
                  image: "/static/gl125s.png",
                  specs: [
                      "125 мм діаметр диску",
                      "1250 Вт",
                      "Проста та дешева КШМ",
                      "Довга ручка",
                  ],
              },
              "DGA-201": {
                  image: "/static/dga201.png",
                  specs: [
                      "125 мм діаметр диску",
                      "20V модель КШМ",
                      "Зручна, проста та автономна",
                      "Немає жодних особливих функцій",
                  ],
              },
          };
            modelsButtons.innerHTML = "";

            models.forEach((model) => {
                const data = modelData[model];
                if (!data) return;

                const button = document.createElement("button");
                button.className = "model-button";

                // Фото моделі
                const img = document.createElement("img");
                img.src = data.image;
                img.alt = model;
                img.style.width = "100px";
                img.style.display = "block";
                img.style.margin = "0 auto 10px";
                button.appendChild(img);

                // Назва моделі
                const title = document.createElement("div");
                title.textContent = model;
                title.style.fontWeight = "bold";
                title.style.textAlign = "center";
                button.appendChild(title);

                // Характеристики
                const ul = document.createElement("ul");
                ul.style.paddingLeft = "20px";
                ul.style.marginTop = "8px";
                data.specs.forEach((spec) => {
                    const li = document.createElement("li");
                    li.textContent = spec;
                    ul.appendChild(li);
                });
                button.appendChild(ul);

                // Обробник кліку
                button.onclick = () => {
                    addMessage(`Обираю модель: ${model}`, true);
                    sendModelChoice(model);
                };

                modelsButtons.appendChild(button);
            });

            modelOverlay.style.display = "flex";
            userInput.style.display = "none";
            sendButton.style.display = "none";
        }

        function hideModelButtons() {
            modelOverlay.style.display = "none";
            userInput.style.display = "block";
            sendButton.style.display = "inline-block";
        }

        async function sendModelChoice(model) {
        hideModelButtons();
        showTypingIndicator();
        
        try {
            const response = await fetch("/chat", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ message: model, seller_name: sellerName }),
            });

            const data = await response.json();
            
            // Додаємо повідомлення тільки якщо це не перехід на stage 3
            if (!data.stage || data.stage !== 3) {
                addMessage(data.reply, false);
            }

            if (data.stage === 3) {
                // Обробляємо перехід на stage 3
                if (data.model_chosen === false) {
                    addMessage("На жаль, ця модель не підходить.", false);
                }
                addMessage(data.reply, false);
            }

            if (data.show_models && data.models?.length) {
                showModelButtons(data.models, "Оберіть модель:", data.attempts_left || 1);
            } else if (data.chat_ended) {
                disableChat();
                if (data.show_restart_button) {
                    restartButton.style.display = "inline-block";
                }
            }
        } catch (error) {
            console.error("Помилка:", error);
            addMessage("Помилка зв'язку. Спробуйте ще раз.", false);
        } finally {
            hideTypingIndicator();
        }
    }

function updateStageIndicator(currentStage) {
  const stageNames = {
    1: "Етап: Виявлення потреби",
    2: "Етап: Презентація товару",
    3: "Етап: Робота із запереченнями",
    4: "Етап: Аргументація заперечення"
  };

  const stageLabel = document.getElementById('stage-label');
  if (!stageLabel) return;

  stageLabel.textContent = stageNames[currentStage] || "";

  // Перезапуск анімації (щоб кожен новий етап анімовано оновлювався)
  stageLabel.classList.remove('stage'); 
  void stageLabel.offsetWidth; // тригер перерендеру
  stageLabel.classList.add('stage');
}

   let sellerName = '';

    async function authenticateSeller(name) {
      try {
          const response = await fetch("/authenticate", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({ seller_name: name })
          });

          const data = await response.json();
          return data;
      } catch (error) {
          console.error("Помилка автентифікації:", error);
          return { error: "Помилка з'єднання" };
      }
  }

  // Показуємо модальне вікно для введення ПІБ при завантаженні
  document.addEventListener('DOMContentLoaded', () => {
      const authModal = document.getElementById('auth-modal');
      const rulesModal = document.getElementById('rules-modal');
      
      // Приховуємо вікно правил спочатку
      rulesModal.style.display = 'none';
      
      // Показуємо вікно автентифікації
      authModal.style.display = 'flex';
      
      // Обробник для кнопки "Продовжити"
      document.getElementById('submit-name-btn').addEventListener('click', async () => {
          const nameInput = document.getElementById('seller-name-input');
          const name = nameInput.value.trim();
          
          if (!name) {
              alert("Будь ласка, введіть ваше ПІБ");
              return;
          }
          
          // Блокуємо інтерфейс під час відправки
          nameInput.disabled = true;
          document.getElementById('submit-name-btn').disabled = true;
          
          // Відправляємо ПІБ на сервер
          const result = await authenticateSeller(name);
          
          if (result.error) {
              alert("Помилка: " + result.error);
              nameInput.disabled = false;
              document.getElementById('submit-name-btn').disabled = false;
          } else {
              // Зберігаємо ПІБ і переходимо до правил
              sellerName = name;
              authModal.style.display = 'none';
              rulesModal.style.display = 'flex';
          }
      });
  });

   async function sendMessage() {
    const message = userInput.value.trim();
    if (!sellerName) {
        alert("Будь ласка, спочатку введіть ваші дані");
        return;
    }

    addMessage(message, true); // Повідомлення продавця
    userInput.value = '';
    showTypingIndicator();
    statusElement.textContent = "Клієнт набирає відповідь...";

    try {
        const response = await fetch('/chat', {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify({message, seller_name: sellerName})
        });

        if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);

        const data = await response.json();

        // Обробка відповіді
        if (data.error) {
            statusElement.textContent = "Помилка: " + data.error;
            if (data.chat_ended) disableChat();
            return;
        }

        if (data.show_restart_button) {
            restartButton.style.display = "inline-block";
        } else {
            restartButton.style.display = "none";
        }

        if (data.hide_choose_model_btn) {
            document.getElementById("choose-model-btn").style.display = "none";
        }

        // --- Нова логіка для етапу 3 (технічні питання) ---
        if (data.stage === 3) {
                // Просто додаємо одне питання — не розділяємо
            addMessage(data.reply, false);
            statusElement.textContent = "Клієнт уточнює деталі про модель...";
            userInput.focus();

            // Додаємо питання по одному з затримкою
            questions.forEach((question, index) => {
                setTimeout(() => {
                    addMessage(question, false);
                    // Прокручуємо чат до останнього повідомлення
                    chatContainer.scrollTop = chatContainer.scrollHeight;
                }, index * 1000); // Затримка 1 сек між питаннями
            });
        } else {
            // Для інших етапів - стандартна обробка
            addMessage(data.reply, false);
        }

        // Обробка етапу вибору моделі
        if (data.show_models) {
            showModelButtons(data.models, "Оберіть модель:", data.attempts_left);
        }

        if (data.show_model_button) {
            document.getElementById("choose-model-btn").classList.remove("hidden");
        }

        if (data.stage !== undefined) {
            updateStageIndicator(data.stage);
        }

        // Оновлення статусу для етапу 3
        if (data.stage === 3) {
            statusElement.textContent = "Клієнт уточнює деталі про модель...";
            userInput.focus();
        }

        // Оновлення прогресу
        if (data.question_progress !== undefined) {
            updateProgressBar(data.question_progress, 7);
        }

        // Завершення діалогу
        if (data.chat_ended) {
            disableChat();
            if (data.model_chosen) {
                setTimeout(() => {
                    addMessage("Дякую! Я беру цю модель.", false);
                }, 1000);
            }
        } else {
            statusElement.textContent = "";
        }

    } catch (error) {
        console.error("Помилка:", error);
        statusElement.textContent = "Помилка з'єднання";
        addMessage("Вибачте, сталася помилка. Спробуйте ще раз.", false);
    } finally {
        hideTypingIndicator();
    }
}

    // Стартове повідомлення при завантаженні
    document.getElementById('accept-rules-btn').addEventListener('click', async () => {
      const rulesModal = document.getElementById('rules-modal');
      rulesModal.style.display = 'none';

      // Починаємо чат
      try {
        const response = await fetch("/start_chat");
        const data = await response.json();

        if (data.reply) {
          addMessage(data.reply, false);       // додаємо перше повідомлення
          unblockChat();                       // розблоковуємо поле вводу
          userInput.focus();
          showStageIndicator();                // показуємо індикатор етапів

          // Зміна зображення клієнта
      const clientCharacter = document.getElementById("client-character");
      const clientAvatar = document.getElementById("client-avatar");

      if (data.avatar) {
        clientAvatar.src = `/static/${data.avatar}`;
      }
      clientCharacter.style.display = "block";
      {
          }
        }
      } catch (err) {
        console.error("Помилка при старті чату:", err);
        addMessage("Помилка при старті чату. Спробуйте ще раз.", false);
      }
    });

    window.addEventListener('DOMContentLoaded', () => {
        setTimeout(() => {
    const chatContainer = document.querySelector('.chat-container');
    
    const firstMessage = document.createproElement('div');
    firstMessage.classList.add('message', 'user-message');
    firstMessage.textContent = 'Добрий день! Вітаємо Вас в магазині Dnipro-M!';
    
    chatContainer.appendChild(firstMessage);
    } , 1000);
  });

      document.addEventListener('DOMContentLoaded', function() {
        const closeHintBtn = document.getElementById("close-hint-btn");
        if (closeHintBtn) {
            closeHintBtn.addEventListener("click", hideModelHint);
        } else {
            console.error("Кнопка закриття підказки не знайдена");
        }
    });

    document.getElementById("choose-model-btn").addEventListener("click", async () => {
      try {
          const response = await fetch("/show_models", { method: "POST" });
          const data = await response.json();

          if (data.models && data.models.length) {
              showModelButtons(data.models);
              updateStageIndicator(2); // якщо треба змінити етап
              document.getElementById("choose-model-btn").classList.add("hidden");
          }
      } catch (err) {
          addMessage("Помилка при завантаженні моделей. Спробуйте ще раз.", false);
      }
  });
    </script>
</body>
</html>